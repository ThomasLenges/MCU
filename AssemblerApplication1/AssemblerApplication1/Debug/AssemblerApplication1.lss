
AVRASM ver. 2.2.6  C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm Sat May 18 10:43:09 2024

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m128def.inc'
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(8): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m128def.inc'
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(9): Including file 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\definitions.asm'
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(10): Including file 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\macros.asm'
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(23): Including file 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\printf.asm'
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): Including file 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm'
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(25): Including file 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\lcd.asm'
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(26): Including file 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\display.asm'
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(27): Including file 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\subroutines.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m128def.inc'
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(8): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m128def.inc'
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(9): Including file 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\definitions.asm'
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(10): Including file 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\macros.asm'
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(23): Including file 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\printf.asm'
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): Including file 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm'
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(25): Including file 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\lcd.asm'
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(26): Including file 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\display.asm'
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(27): Including file 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\subroutines.asm'
                                 
                                 /*
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega128.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m128def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega128
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega128
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M128DEF_INC_
                                 #define _M128DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega128
                                 #pragma AVRPART ADMIN PART_NAME ATmega128
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x97
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UCSR1C	= 0x9d	; MEMORY MAPPED
                                 .equ	UDR1	= 0x9c	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0x9b	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0x9a	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0x98	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0x99	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0x95	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0x90	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x8c	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x8b	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x8a	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x88	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x89	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x86	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x87	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x84	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x85	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x82	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x83	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x80	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x81	; MEMORY MAPPED
                                 .equ	ETIMSK	= 0x7d	; MEMORY MAPPED
                                 .equ	ETIFR	= 0x7c	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x7a	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x78	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x79	; MEMORY MAPPED
                                 .equ	TWCR	= 0x74	; MEMORY MAPPED
                                 .equ	TWDR	= 0x73	; MEMORY MAPPED
                                 .equ	TWAR	= 0x72	; MEMORY MAPPED
                                 .equ	TWSR	= 0x71	; MEMORY MAPPED
                                 .equ	TWBR	= 0x70	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x6f	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x6d	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x6c	; MEMORY MAPPED
                                 .equ	EICRA	= 0x6a	; MEMORY MAPPED
                                 .equ	SPMCSR	= 0x68	; MEMORY MAPPED
                                 .equ	PORTG	= 0x65	; MEMORY MAPPED
                                 .equ	DDRG	= 0x64	; MEMORY MAPPED
                                 .equ	PING	= 0x63	; MEMORY MAPPED
                                 .equ	PORTF	= 0x62	; MEMORY MAPPED
                                 .equ	DDRF	= 0x61	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	XDIV	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	EICRB	= 0x3a
                                 .equ	EIMSK	= 0x39
                                 .equ	EIFR	= 0x38
                                 .equ	TIMSK	= 0x37
                                 .equ	TIFR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OCR0	= 0x31
                                 .equ	ASSR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	OCDR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	SFIOR	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR0	= 0x0c
                                 .equ	UCSR0A	= 0x0b
                                 .equ	UCSR0B	= 0x0a
                                 .equ	UBRR0L	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	PORTE	= 0x03
                                 .equ	DDRE	= 0x02
                                 .equ	PINE	= 0x01
                                 .equ	PINF	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR00	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR01	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR02	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR03	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR04	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR05	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR06	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR07	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	UCSZ2	= UCSZ02	; For compatibility
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL0	= 6	; USART Mode Select
                                 
                                 ; UBRR0H - USART Baud Rate Register Hight Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR10	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR11	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR12	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR13	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR14	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR15	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR16	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR17	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL1	= 6	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register Hight Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	SM2	= 2	; Sleep Mode Select
                                 .equ	SM0	= 3	; Sleep Mode Select
                                 .equ	SM1	= 4	; Sleep Mode Select
                                 .equ	SE	= 5	; Sleep Enable
                                 .equ	SRW10	= 6	; External SRAM Wait State Select
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW11	= 1	; Wait state select bit upper page
                                 .equ	SRW00	= 2	; Wait state select bit lower page
                                 .equ	SRW01	= 3	; Wait state select bit lower page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value
                                 .equ	CAL1	= 1	; Oscillator Calibration Value
                                 .equ	CAL2	= 2	; Oscillator Calibration Value
                                 .equ	CAL3	= 3	; Oscillator Calibration Value
                                 .equ	CAL4	= 4	; Oscillator Calibration Value
                                 .equ	CAL5	= 5	; Oscillator Calibration Value
                                 .equ	CAL6	= 6	; Oscillator Calibration Value
                                 .equ	CAL7	= 7	; Oscillator Calibration Value
                                 
                                 ; XDIV - XTAL Divide Control Register
                                 .equ	XDIV0	= 0	; XTAl Divide Select Bit 0
                                 .equ	XDIV1	= 1	; XTAl Divide Select Bit 1
                                 .equ	XDIV2	= 2	; XTAl Divide Select Bit 2
                                 .equ	XDIV3	= 3	; XTAl Divide Select Bit 3
                                 .equ	XDIV4	= 4	; XTAl Divide Select Bit 4
                                 .equ	XDIV5	= 5	; XTAl Divide Select Bit 5
                                 .equ	XDIV6	= 6	; XTAl Divide Select Bit 6
                                 .equ	XDIVEN	= 7	; XTAL Divide Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** MISC *************************
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR321	= 0	; Prescaler Reset Timer/Counter3, Timer/Counter2, and Timer/Counter1
                                 .equ	PSR1	= PSR321	; For compatibility
                                 .equ	PSR2	= PSR321	; For compatibility
                                 .equ	PSR3	= PSR321	; For compatibility
                                 .equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 .equ	PUD	= 2	; Pull Up Disable
                                 ;.equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	GICR	= EIMSK	; For compatibility
                                 .equ	GIMSK	= EIMSK	; For compatibility
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	GIFR	= EIFR	; For compatibility
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 0
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; ASSR - Asynchronus Status Register
                                 .equ	TCR0UB	= 0	; Timer/Counter Control Register 0 Update Busy
                                 .equ	OCR0UB	= 1	; Output Compare register 0 Busy
                                 .equ	TCN0UB	= 2	; Timer/Counter0 Update Busy
                                 .equ	AS0	= 3	; Asynchronus Timer/Counter 0
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE1C	= 0	; Timer/Counter 1, Output Compare Match C Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF1C	= 0	; Timer/Counter 1, Output Compare C Match Flag
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Clock Select bit 0
                                 .equ	CS11	= 1	; Clock Select 1 bit 1
                                 .equ	CS12	= 2	; Clock Select1 bit 2
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare for channel C
                                 .equ	FOC1B	= 6	; Force Output Compare for channel B
                                 .equ	FOC1A	= 7	; Force Output Compare for channel A
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TCCR2 - Timer/Counter Control Register
                                 .equ	CS20	= 0	; Clock Select
                                 .equ	CS21	= 1	; Clock Select
                                 .equ	CS22	= 2	; Clock Select
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Match Output Mode
                                 .equ	COM21	= 5	; Compare Match Output Mode
                                 .equ	WGM20	= 6	; Wafeform Generation Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter Register
                                 .equ	TCNT2_0	= 0	; Timer/Counter Register Bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter Register Bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter Register Bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter Register Bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter Register Bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter Register Bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter Register Bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter Register Bit 7
                                 
                                 ; OCR2 - Output Compare Register
                                 .equ	OCR2_0	= 0	; Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Output Compare Register Bit 7
                                 
                                 ; TIMSK - 
                                 .equ	TOIE2	= 6	; 
                                 .equ	OCIE2	= 7	; 
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE3C	= 1	; Timer/Counter3, Output Compare Match Interrupt Enable
                                 .equ	TOIE3	= 2	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3B	= 3	; Timer/Counter3 Output CompareB Match Interrupt Enable
                                 .equ	OCIE3A	= 4	; Timer/Counter3 Output CompareA Match Interrupt Enable
                                 .equ	TICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF3C	= 1	; Timer/Counter3 Output Compare C Match Flag
                                 .equ	TOV3	= 2	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3B	= 3	; Output Compare Flag 1B
                                 .equ	OCF3A	= 4	; Output Compare Flag 1A
                                 .equ	ICF3	= 5	; Input Capture Flag 1
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	PSR1	= PSR321	; For compatibility
                                 ;.equ	PSR2	= PSR321	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM30	= WGM30	; For compatibility
                                 .equ	WGM31	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM31	= WGM31	; For compatibility
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Comparet Ouput Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 3A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Clock Select 3 bit 0
                                 .equ	CS31	= 1	; Clock Select 3 bit 1
                                 .equ	CS32	= 2	; Clock Select3 bit 2
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	CTC30	= WGM32	; For compatibility
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	CTC31	= WGM33	; For compatibility
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3  Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare for channel C
                                 .equ	FOC3B	= 6	; Force Output Compare for channel B
                                 .equ	FOC3A	= 7	; Force Output Compare for channel A
                                 
                                 ; TCNT3L - Timer/Counter3 Low Byte
                                 .equ	TCN3L0	= 0	; Timer/Counter 3 bit 0
                                 .equ	TCN3L1	= 1	; Timer/Counter 3 bit 1
                                 .equ	TCN3L2	= 2	; Timer/Counter 3 bit 2
                                 .equ	TCN3L3	= 3	; Timer/Counter 3 bit 3
                                 .equ	TCN3L4	= 4	; Timer/Counter 3 bit 4
                                 .equ	TCN3L5	= 5	; Timer/Counter 3 bit 5
                                 .equ	TCN3L6	= 6	; Timer/Counter 3 bit 6
                                 .equ	TCN3L7	= 7	; Timer/Counter 3 bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADFR	= 5	; ADC  Free Running Select
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	WDTON	= 0	; Watchdog timer always on
                                 .equ	M103C	= 1	; ATmega103 compatibility mode
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0xffff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 4096
                                 .equ	RAMEND	= 0x10ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 131072
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 4096
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xf000
                                 .equ	NRWW_STOP_ADDR	= 0xffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xefff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0xfe00
                                 .equ	SECONDBOOTSTART	= 0xfc00
                                 .equ	THIRDBOOTSTART	= 0xf800
                                 .equ	FOURTHBOOTSTART	= 0xf000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	OC2addr	= 0x0012	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0014	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0016	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0018	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x001a	; Timer/Counter Compare Match B
                                 .equ	OVF1addr	= 0x001c	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x001e	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0020	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0024	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0026	; USART0 Data Register Empty
                                 .equ	UTXC0addr	= 0x0028	; USART0, Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	OC1Caddr	= 0x0030	; Timer/Counter1 Compare Match C
                                 .equ	ICP3addr	= 0x0032	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0034	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0036	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0038	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x003a	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x003c	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x003e	; USART1, Data Register Empty
                                 .equ	UTXC1addr	= 0x0040	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x0042	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0044	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 70	; size in words
                                 
                                 #endif  /* _M128DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                  * main.asm
                                  *
                                  *  Created: 30/04/2024 10:55:24
                                  *   Author: renuka
                                  */ 
                                 
                                 .include "m128def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega128.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m128def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega128
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega128
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M128DEF_INC_
                                 #endif  /* _M128DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 .include "definitions.asm"	
                                 
                                 ; purpose library, definition of addresses and constants
                                 ; 20171114 A.S.
                                 
                                 ; === definitions  ===
                                 .list
                                 .include "macros.asm"
                                 
                                 ; purpose library, general-purpose macros
                                 ; author (c) R.Holzer (adapted MICRO210/EE208 A.Schmid)
                                 ; modified to include newer macros used for project
                                 
                                 ; ==============
                                 ; 	trivia macros
                                 ; ==============
                                 
                                 ; --- display question and answers as long as answer buttons not pressed
                                 .macro QUESTION ; question: str0, str1 answer: str2, str3, str4, str5
                                 question_start:
                                 	DISPLAY2 @0, @1 ; display question
                                 	WAIT_MS 2000
                                 	in b0, PIND
                                 	out PORTB, b0 
                                 	sbrs b0, 4
                                 	jmp question_end
                                 	sbrs b0, 3
                                 	jmp question_end
                                 	sbrs b0, 2
                                 	jmp question_end
                                 	sbrs b0, 1
                                 	jmp question_end
                                 	DISPLAY2 @2, @3
                                 	in b0, PIND
                                 	out PORTB, b0 
                                 	sbrs b0, 4
                                 	jmp question_end
                                 	sbrs b0, 3
                                 	jmp question_end
                                 	sbrs b0, 2
                                 	jmp question_end
                                 	sbrs b0, 1
                                 	jmp question_end
                                 	WAIT_MS 2000
                                 	in b0, PIND
                                 	out PORTB, b0 
                                 	sbrs b0, 4
                                 	jmp question_end
                                 	sbrs b0, 3
                                 	jmp question_end
                                 	sbrs b0, 2
                                 	jmp question_end
                                 	sbrs b0, 1
                                 	jmp question_end
                                 	DISPLAY2 @4, @5
                                 	WAIT_MS 2000
                                 	in b0, PIND
                                 	out PORTB, b0 
                                 	sbrs b0, 4
                                 	jmp question_end
                                 	sbrs b0, 3
                                 	jmp question_end
                                 	sbrs b0, 2
                                 	rjmp question_end
                                 	sbrs b0, 1
                                 	jmp question_end
                                 	jmp question_start
                                 question_end:
                                 .endmacro
                                 
                                 ; --- set T in SREG if answer correct
                                 .macro COMPARE
                                 	ldi zl, low(2*@0)
                                 	ldi zh, high(2*@0)
                                 	lpm
                                 	cp b0, r0
                                 	brne PC+2
                                 	set
                                 .endmacro
                                 
                                 ; --- print score on LCD as well as fail or pass message
                                 .macro PRINT_SCORE
                                 	call LCD_clear
                                 	brts PC+2
                                 	jmp incorrect
                                 correct:
                                 	DISPLAY1 strcorrect
                                 	jmp score
                                 incorrect:
                                 	DISPLAY1 strfalse
                                 score:
                                 	CLR4 a3, a2, a1, a0
                                 	mov a0, @0
                                 	PRINTF LCD
                                 .db "Score:",FDEC,a,0
                                 .endmacro
                                 
                                 
                                 ; ==============
                                 ; 	pointers
                                 ; ==============
                                 
                                 ; --- loading an immediate into a pointer XYZ,SP ---
                                 .macro 	LDIX	; sram
                                 	ldi	xl, low(@0)
                                 	ldi	xh,high(@0)
                                 	.endmacro	
                                 .macro 	LDIY	; sram	
                                 	ldi	yl, low(@0)
                                 	ldi	yh,high(@0)
                                 	.endmacro	
                                 .macro 	LDIZ	; sram
                                 	ldi	zl, low(@0)
                                 	ldi	zh,high(@0)
                                 	
                                 	.endmacro
                                 .macro	LDZD	; sram, reg	; sram+reg -> Z
                                 	mov	zl,@1
                                 	clr	zh
                                 	subi	zl, low(-@0)
                                 	sbci	zh,high(-@0)
                                 	.endmacro
                                 .macro	LDSP	; sram
                                 	ldi	r16, low(@0)
                                 	out	spl,r16
                                 	ldi	r16,high(@0)
                                 	out	sph,r16
                                 	.endmacro
                                 
                                 ; --- load/store SRAM addr into pointer XYZ ---	
                                 .macro 	LDSX	; sram
                                 	lds	xl,@0
                                 	lds	xh,@0+1
                                 	.endmacro
                                 .macro 	LDSY	; sram
                                 	lds	yl,@0
                                 	lds	yh,@0+1
                                 	.endmacro
                                 .macro 	LDSZ	; sram
                                 	lds	zl,@0
                                 	lds	zh,@0+1
                                 	.endmacro
                                 .macro 	STSX	; sram
                                 	sts	@0,  xl
                                 	sts	@0+1,xh
                                 	.endmacro	
                                 .macro 	STSY	; sram
                                 	sts	@0,  yl
                                 	sts	@0+1,yh
                                 	.endmacro
                                 .macro 	STSZ	; sram
                                 	sts	@0,  zl
                                 	sts	@0+1,zh
                                 	.endmacro	
                                 
                                 ; --- push/pop pointer XYZ ---
                                 .macro	PUSHX			; push X
                                 	push	xl
                                 	push	xh
                                 	.endmacro
                                 .macro	POPX			; pop X
                                 	pop	xh
                                 	pop	xl
                                 	.endmacro
                                 	
                                 .macro	PUSHY			; push Y
                                 	push	yl
                                 	push	yh
                                 	.endmacro
                                 .macro	POPY			; pop Y
                                 	pop	yh
                                 	pop	yl
                                 	.endmacro
                                 
                                 .macro	PUSHZ			; push Z
                                 	push	zl
                                 	push	zh
                                 	.endmacro
                                 .macro	POPZ			; pop Z
                                 	pop	zh
                                 	pop	zl
                                 	.endmacro
                                 
                                 ; --- multiply/divide Z ---	
                                 .macro	MUL2Z			; multiply Z by 2
                                 	lsl	zl
                                 	rol	zh
                                 	.endmacro
                                 .macro	DIV2Z			; divide Z by 2
                                 	lsr	zh
                                 	ror	zl
                                 	.endmacro
                                 
                                 ; --- add register to pointer XYZ ---	
                                 .macro	ADDX	;reg		; x <- y+reg
                                 	add	xl,@0
                                 	brcc	PC+2
                                 	subi	xh,-1		; add carry
                                 	.endmacro
                                 .macro	ADDY	;reg		; y <- y+reg
                                 	add	yl,@0
                                 	brcc	PC+2
                                 	subi	yh,-1		; add carry
                                 	.endmacro
                                 .macro	ADDZ	;reg		; z <- z+reg
                                 	add	zl,@0
                                 	brcc	PC+2
                                 	subi	zh,-1		; add carry
                                 	.endmacro
                                 
                                 ; ===================
                                 ; 	miscellaneous
                                 ; ===================
                                 
                                 ; --- output/store (regular I/O space) immediate value ---
                                 .macro	OUTI	; port,k	output immediate value to port
                                 	ldi	w,@1
                                 	out	@0,w
                                 	.endmacro
                                 
                                 ; --- output/store (extended I/O space) immediate value ---
                                 .macro OUTEI	; port,k    output immediate value to port
                                 	ldi	w,@1
                                 	sts	@0,w
                                 	.endmacro
                                 
                                 ; --- add immediate value ---
                                 .macro	ADDI
                                 	subi	@0,-@1
                                 	.endmacro
                                 .macro	ADCI
                                 	sbci	@0,-@1
                                 	.endmacro
                                 
                                 ; --- inc/dec with range limitation ---
                                 .macro	INC_LIM	; reg,limit
                                 	cpi	@0,@1
                                 	brlo	PC+3
                                 	ldi	@0,@1	
                                 	rjmp	PC+2
                                 	inc	@0
                                 	.endmacro
                                 
                                 .macro	DEC_LIM	; reg,limit
                                 	cpi	@0,@1
                                 	breq	PC+5
                                 	brlo	PC+3
                                 	dec	@0
                                 	rjmp	PC+2
                                 	ldi	@0,@1
                                 	.endmacro
                                 
                                 ; --- inc/dec with cyclic range ---
                                 .macro	INC_CYC	; reg,low,high
                                 	cpi	@0,@2
                                 	brsh	_low	; reg>=high then reg=low
                                 	cpi	@0,@1
                                 	brlo	_low	; reg< low  then reg=low
                                 	inc	@0
                                 	rjmp	_done
                                 _low:	ldi	@0,@1
                                 _done:	
                                     .endmacro
                                 	
                                 .macro	DEC_CYC	; reg,low,high
                                 	cpi	@0,@1
                                 	breq	_high	; reg=low then reg=high
                                 	brlo	_high	; reg<low then reg=high
                                 	dec	@0	
                                 	cpi	@0,@2
                                 	brsh	_high	; reg>=high then high
                                 	rjmp	_done
                                 _high:	ldi	@0,@2
                                 _done:	
                                 	.endmacro
                                 
                                 .macro	INCDEC	;port,b1,b2,reg,low,high
                                 	sbic	@0,@1
                                 	rjmp	PC+6
                                 
                                 	cpi	@3,@5
                                 	brlo	PC+3
                                 	ldi	@3,@4	
                                 	rjmp	PC+2
                                 	inc	@3
                                 
                                 	sbic	@0,@2
                                 	rjmp	PC+7
                                 	
                                 	cpi	@3,@4
                                 	breq	PC+5
                                 	brlo	PC+3
                                 	dec	@3
                                 	rjmp	PC+2
                                 	ldi	@3,@5
                                 	.endmacro		
                                 
                                 ; --- wait loops ---
                                 ; wait 10...196608 cycles
                                 .macro	WAIT_C	; k
                                 	ldi	w,  low((@0-7)/3)
                                 	mov	u,w			; u=LSB
                                 	ldi	w,high((@0-7)/3)+1	; w=MSB
                                 	dec	u
                                 	brne	PC-1
                                 	dec	u
                                 	dec	w
                                 	brne	PC-4
                                 	.endmacro
                                 
                                 ; wait micro-seconds (us)
                                 ; us = x*3*1000'000/clock)	==> x=us*clock/3000'000
                                 .macro	WAIT_US ; k
                                 	ldi	w, low((clock/1000*@0/3000)-1)
                                 	mov	u,w
                                 	ldi	w,high((clock/1000*@0/3000)-1)+1 ; set up: 3 cyles
                                 	dec	u
                                 	brne	PC-1		; inner loop: 3 cycles
                                 	dec	u		; adjustment for outer loop
                                 	dec	w
                                 	brne	PC-4
                                 	.endmacro
                                 
                                 ; wait mili-seconds (ms)
                                 .macro	WAIT_MS ; k
                                 	ldi	w, low(@0)
                                 	mov	u,w		; u = LSB	
                                 	ldi	w,high(@0)+1	; w = MSB
                                 wait_ms:
                                 	push	w		; wait 1000 usec
                                 	push	u
                                 	ldi	w, low((clock/3000)-5)	
                                 	mov	u,w
                                 	ldi	w,high((clock/3000)-5)+1
                                 	dec	u
                                 	brne	PC-1		; inner loop: 3 cycles
                                 	dec	u		; adjustment for outer loop
                                 	dec	w
                                 	brne	PC-4
                                 	pop	u
                                 	pop	w
                                 	
                                 	dec	u
                                 	brne	wait_ms
                                 	dec	w
                                 	brne	wait_ms
                                 	.endmacro
                                 
                                 ; --- conditional jumps/calls ---
                                 .macro	JC0			; jump if carry=0
                                 	brcs	PC+2	
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	JC1			; jump if carry=1
                                 	brcc	PC+2	
                                 	rjmp	@0
                                 	.endmacro
                                 
                                 .macro	JK	; reg,k,addr	; jump if reg=k
                                 	cpi	@0,@1
                                 	breq	@2
                                 	.endmacro
                                 .macro	_JK	; reg,k,addr	; jump if reg=k
                                 	cpi	@0,@1
                                 	brne	PC+2
                                 	rjmp	@2
                                 	.endmacro	
                                 .macro	JNK	; reg,k,addr	; jump if not(reg=k)
                                 	cpi	@0,@1
                                 	brne	@2
                                 	.endmacro 
                                 
                                 .macro	CK	; reg,k,addr	; call if reg=k
                                 	cpi	@0,@1
                                 	brne	PC+2
                                 	rcall	@2
                                 	.endmacro
                                 .macro	CNK	; reg,k,addr	; call if not(reg=k)
                                 	cpi	@0,@1
                                 	breq	PC+2
                                 	rcall	@2
                                 	.endmacro 
                                 
                                 .macro	JSK	; sram,k,addr	; jump if sram=k
                                 	lds	w,@0
                                 	cpi	w,@1
                                 	breq	@2
                                 	.endmacro 
                                 .macro	JSNK	; sram,k,addr	; jump if not(sram=k)
                                 	lds	w,@0
                                 	cpi	w,@1
                                 	brne	@2
                                 	.endmacro
                                 
                                 ; --- loops ---
                                 .macro	DJNZ	; reg,addr	; decr and jump if not zero
                                 	dec	@0
                                 	brne	@1
                                 	.endmacro
                                 .macro	DJNK	; reg,k,addr	; decr and jump if not k
                                 	dec	@0
                                 	cpi	@0,@1
                                 	brne	@2
                                 	.endmacro
                                 
                                 .macro	IJNZ	; reg,addr	; inc and jump if not zero
                                 	inc	@0
                                 	brne	@1
                                 	.endmacro
                                 .macro	IJNK	; reg,k,addr	; inc and jump if not k
                                 	inc	@0
                                 	cpi	@0,@1
                                 	brne	@2
                                 	.endmacro
                                 .macro	_IJNK	; reg,k,addr	; inc and jump if not k
                                 	inc	@0
                                 	ldi	w,@1
                                 	cp	@0,w
                                 	brne	@2
                                 	.endmacro
                                 
                                 .macro	ISJNK	; sram,k,addr	; inc sram and jump if not k
                                 	lds	w,@0
                                 	inc	w
                                 	sts	@0,w
                                 	cpi	w,@1
                                 	brne	@2
                                 	.endmacro
                                 .macro	_ISJNK	; sram,k,addr	; inc sram and jump if not k
                                 	lds	w,@0
                                 	inc	w
                                 	sts	@0,w
                                 	cpi	w,@1
                                 	breq	PC+2	
                                 	rjmp	@2
                                 	.endmacro
                                 
                                 .macro	DSJNK	; sram,k,addr	; dec sram and jump if not k
                                 	lds	w,@0
                                 	dec	w
                                 	sts	@0,w
                                 	cpi	w,@1
                                 	brne	@2
                                 	.endmacro
                                 
                                 ; --- table lookup ---
                                 .macro	LOOKUP	;reg, index,tbl
                                 	push	ZL
                                 	push	ZH
                                 	mov	zl,@1		; move index into z
                                 	clr	zh
                                 	subi	zl, low(-2*@2)	; add base address of table
                                 	sbci	zh,high(-2*@2)	
                                 	lpm			; load program memory (into r0)
                                 	mov	@0,r0
                                 	pop	ZH
                                 	pop	ZL
                                 	.endmacro
                                 
                                 .macro	LOOKUP2	;r1,r0, index,tbl
                                 	mov	zl,@2		; move index into z
                                 	clr	zh
                                 	lsl	zl		; multiply by 2
                                 	rol	zh
                                 	subi	zl, low(-2*@3)	; add base address of table
                                 	sbci	zh,high(-2*@3)
                                 	lpm			; get LSB byte
                                 	mov	w,r0		; temporary store LSB in w
                                 	adiw	zl,1		; increment Z
                                 	lpm			; get MSB byte
                                 	mov	@0,r0		; mov MSB to res1
                                 	mov	@1,w		; mov LSB to res0
                                 	.endmacro
                                 
                                 .macro	LOOKUP4	;r3,r2,r1,r0, index,tbl
                                 	mov	zl,@4		; move index into z
                                 	clr	zh
                                 	lsl	zl		; multiply by 2
                                 	rol	zh
                                 	lsl	zl		; multiply by 2
                                 	rol	zh	
                                 	subi	zl, low(-2*@5)	; add base address of table
                                 	sbci	zh,high(-2*@5)
                                 	lpm
                                 	mov	@1,r0		; load high word LSB
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@0,r0		; load high word MSB
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@3,r0		; load low word LSB		
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@2,r0		; load low word MSB
                                 	.endmacro
                                 
                                 .macro	LOOKDOWN ;reg,index,tbl
                                 	ldi	ZL, low(2*@2)	; load table address
                                 	ldi	ZH,high(2*@2)
                                 	clr	@1
                                 loop:	lpm
                                 	cp	r0,@0
                                 	breq	found
                                 	inc	@1
                                 	adiw	ZL,1
                                 	tst	r0
                                 	breq	notfound
                                 	rjmp	loop
                                 notfound:
                                 	ldi	@1,-1
                                 found:	
                                 	.endmacro
                                 
                                 ; --- branch table ---
                                 .macro	C_TBL	; reg,tbl
                                 	ldi	ZL, low(2*@1)
                                 	ldi	ZH,high(2*@1)
                                 	lsl	@0
                                 	add	ZL,@0
                                 	brcc	PC+2
                                 	inc	ZH
                                 	lpm
                                 	push	r0
                                 	lpm
                                 	mov	zh,r0
                                 	pop	zl
                                 	icall
                                 	.endmacro
                                 .macro	J_TBL	; reg,tbl	
                                 	ldi	ZL, low(2*@1)
                                 	ldi	ZH,high(2*@1)
                                 	lsl	@0
                                 	add	ZL,@0
                                 	brcc	PC+2
                                 	inc	ZH
                                 	lpm
                                 	push	r0
                                 	lpm
                                 	mov	zh,r0
                                 	pop	zl	
                                 	ijmp
                                 	.endmacro
                                 
                                 .macro	BRANCH	; reg		; branching using the stack
                                 	ldi	w, low(tbl)
                                 	add	w,@0
                                 	push	w
                                 	ldi	w,high(tbl)
                                 	brcc	PC+2
                                 	inc	w
                                 	push	w
                                 	ret
                                 tbl:
                                 	.endmacro	
                                 
                                 ; --- multiply/division ---
                                 .macro	DIV2	; reg
                                 	lsr	@0
                                 	.endmacro
                                 .macro	DIV4	; reg
                                 	lsr	@0
                                 	lsr	@0
                                 	.endmacro	
                                 .macro	DIV8	; reg
                                 	lsr	@0
                                 	lsr	@0
                                 	lsr	@0
                                 	.endmacro
                                 	
                                 .macro	MUL2	; reg
                                 	lsl	@0
                                 	.endmacro
                                 .macro	MUL4	; reg
                                 	lsl	@0
                                 	lsl	@0
                                 	.endmacro
                                 .macro	MUL8	; reg
                                 	lsl	@0
                                 	lsl	@0
                                 	lsl	@0
                                 	.endmacro
                                 
                                 ; ====================================
                                 ; 	extending existing instructios
                                 ; ====================================
                                 
                                 ; --- immediate ops with r0..r15 ---
                                 .macro	_ADDI
                                 	ldi	w,@1
                                 	add	@0,w
                                 	.endmacro
                                 .macro	_ADCI
                                 	ldi	w,@1
                                 	adc	@0,w
                                 	.endmacro
                                 .macro	_SUBI
                                 	ldi	w,@1
                                 	sub	@0,w
                                 	.endmacro
                                 .macro	_SBCI
                                 	ldi	w,@1
                                 	sbc	@0,w
                                 	.endmacro
                                 .macro	_ANDI
                                 	ldi	w,@1
                                 	and	@0,w
                                 	.endmacro
                                 .macro	_ORI
                                 	ldi	w,@1
                                 	or	@0,w
                                 	.endmacro
                                 .macro	_EORI
                                 	ldi	w,@1
                                 	eor	@0,w
                                 	.endmacro
                                 .macro	_SBR
                                 	ldi	w,@1
                                 	or	@0,w
                                 	.endmacro
                                 .macro	_CBR
                                 	ldi	w,~@1
                                 	and	@0,w
                                 	.endmacro
                                 .macro	_CPI
                                 	ldi	w,@1
                                 	cp	@0,w
                                 	.endmacro
                                 .macro	_LDI
                                 	ldi	w,@1
                                 	mov	@0,w
                                 	.endmacro
                                 
                                 ; --- bit access for port p32..p63 ---
                                 .macro	_SBI
                                 	in	w,@0
                                 	ori	w,1<<@1
                                 	out	@0,w
                                 	.endmacro
                                 .macro	_CBI
                                 	in	w,@0
                                 	andi	w,~(1<<@1)
                                 	out	@0,w
                                 	.endmacro
                                 	
                                 ; --- extending branch distance to +/-2k ---
                                 .macro	_BREQ
                                 	brne	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRNE
                                 	breq	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRCS
                                 	brcc	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRCC
                                 	brcs	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRSH
                                 	brlo	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRLO
                                 	brsh	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRMI
                                 	brpl	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRPL
                                 	brmi	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRGE
                                 	brlt	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRLT
                                 	brge	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRHS
                                 	brhc	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRHC
                                 	brhs	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRTS
                                 	brtc	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRTC
                                 	brts	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRVS
                                 	brvc	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRVC
                                 	brvs	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRIE
                                 	brid	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRID
                                 	brie	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 
                                 ; ====================
                                 ; 	bit operations
                                 ; ====================
                                 
                                 ; --- moving bits ---
                                 .macro	MOVB	; reg1,b1, reg2,b2	; reg1,bit1 <- reg2,bit2
                                 	bst	@2,@3
                                 	bld	@0,@1
                                 	.endmacro
                                 .macro	OUTB	; port1,b1, reg2,b2	; port1,bit1 <- reg2,bit2
                                 	sbrs	@2,@3
                                 	cbi	@0,@1
                                 	sbrc	@2,@3
                                 	sbi	@0,@1
                                 	.endmacro
                                 .macro	INB	; reg1,b1, port2,b2	; reg1,bit1 <- port2,bit2
                                 	sbis	@2,@3
                                 	cbr	@0,1<<@1
                                 	sbic	@2,@3
                                 	sbr	@0,1<<@1
                                 	.endmacro
                                 
                                 .macro	Z2C				; zero to carry
                                 	sec
                                 	breq	PC+2	; (Z=1)
                                 	clc
                                 	.endmacro
                                 .macro	Z2INVC				; zero to inverse carry
                                 	sec
                                 	brne	PC+2	; (Z=0)
                                 	clc
                                 	.endmacro
                                 
                                 .macro	C2Z				; carry to zero
                                 	sez
                                 	brcs	PC+2	; (C=1)
                                 	clz
                                 	.endmacro
                                 
                                 .macro	B2C	; reg,b			; bit to carry
                                 	sbrc	@0,@1
                                 	sec
                                 	sbrs	@0,@1
                                 	clc
                                 	.endmacro
                                 .macro	C2B	; reg,b			; carry to bit
                                 	brcc	PC+2
                                 	sbr	@0,(1<<@1)
                                 	brcs	PC+2
                                 	cbr	@0,(1<<@1)
                                 	.endmacro
                                 .macro	P2C	; port,b		; port to carry
                                 	sbic	@0,@1
                                 	sec
                                 	sbis	@0,@1
                                 	clc
                                 	.endmacro
                                 .macro	C2P	; port,b		; carry to port
                                 	brcc	PC+2
                                 	sbi	@0,@1
                                 	brcs	PC+2
                                 	cbi	@0,@1
                                 	.endmacro
                                 
                                 ; --- inverting bits ---
                                 .macro	INVB	; reg,bit		; inverse reg,bit
                                 	ldi	w,(1<<@1)
                                 	eor	@0,w
                                 	.endmacro
                                 .macro	INVP	; port,bit		; inverse port,bit	
                                 	sbis	@0,@1
                                 	rjmp	PC+3
                                 	cbi	@0,@1
                                 	rjmp	PC+2
                                 	sbi	@0,@1
                                 	.endmacro
                                 .macro	INVC				; inverse carry	
                                 	brcs	PC+3
                                 	sec
                                 	rjmp	PC+2
                                 	clc
                                 	.endmacro
                                 
                                 ; --- setting a single bit ---
                                 .macro	SETBIT	; reg(0..7)
                                 ; in	reg (0..7)
                                 ; out	reg with bit (0..7) set to 1.
                                 ; 0=00000001
                                 ; 1=00000010
                                 ; ...
                                 ; 7=10000000
                                 	mov	w,@0
                                 	clr	@0
                                 	inc	@0
                                 	andi	w,0b111	
                                 	breq	PC+4
                                 	lsl	@0
                                 	dec	w
                                 	brne	PC-2
                                 	.endmacro
                                 
                                 ; --- logical operations with masks ---
                                 .macro	MOVMSK	; reg1,reg2,mask	; reg1 <- reg2 (mask)
                                 	ldi	w,~@2	
                                 	and	@0,w
                                 	ldi	w,@2
                                 	and	@1,w	
                                 	or	@0,@1
                                 	.endmacro	
                                 .macro	ANDMSK	; reg1,reg2,mask	; reg1 <- ret 1 AND reg2 (mask)		
                                 	mov	w,@1
                                 	ori	w,~@2
                                 	and	@0,w
                                 	.endmacro	
                                 .macro	ORMSK	; reg1,reg2,mask	; reg1 <- ret 1 AND reg2 (mask)		
                                 	mov	w,@1
                                 	andi	w,@2
                                 	or	@0,w
                                 	.endmacro
                                 	
                                 ; --- logical operations on bits ---
                                 .macro	ANDB	; r1,b1, r2,b2, r3,b3	; reg1,b1 <- reg2,b2 AND reg3,b3
                                 	set
                                 	sbrs	@4,@5	
                                 	clt
                                 	sbrs	@2,@3	
                                 	clt
                                 	bld	@0,@1
                                 	.endmacro
                                 .macro	ORB	; r1,b1, r2,b2, r3,b3	; reg1.b1 <- reg2.b2 OR reg3.b3
                                 	clt
                                 	sbrc	@4,@5	
                                 	set
                                 	sbrc	@2,@3	
                                 	set
                                 	bld	@0,@1
                                 	.endmacro
                                 .macro	EORB	; r1,b1, r2,b2, r3,b3	; reg1.b1 <- reg2.b2 XOR reg3.b3
                                 	sbrc	@4,@5
                                 	rjmp	f1
                                 f0:	bst	@2,@3	
                                 	rjmp	PC+4
                                 f1:	set
                                 	sbrc	@0,@1
                                 	clt
                                 	bld	@0,@0	
                                 	.endmacro
                                 	
                                 ; --- operations based on register bits ---
                                 .macro	FB0	; reg,bit		; bit=0
                                 	cbr	@0,1<<@1
                                 	.endmacro
                                 .macro	FB1	; reg,bit		; bit=1
                                 	sbr	@0,1<<@1
                                 	.endmacro
                                 .macro	_FB0	; reg,bit		; bit=0
                                 	ldi	w,~(1<<@1)
                                 	and	@0,w
                                 	.endmacro
                                 .macro	_FB1	; reg,bit		; bit=1
                                 	ldi	w,1<<@1
                                 	or	@0,w
                                 	.endmacro
                                 .macro	SB0	; reg,bit,addr		; skip if bit=0
                                 	sbrc	@0,@1
                                 	.endmacro
                                 .macro	SB1	; reg,bit,addr		; skip if bit=1
                                 	sbrs	@0,@1
                                 	.endmacro
                                 .macro	JB0	; reg,bit,addr		; jump if bit=0
                                 	sbrs	@0,@1
                                 	rjmp	@2
                                 	.endmacro
                                 .macro	JB1	; reg,bit,addr		; jump if bit=1
                                 	sbrc	@0,@1
                                 	rjmp	@2
                                 	.endmacro
                                 .macro	CB0	; reg,bit,addr		; call if bit=0
                                 	sbrs	@0,@1
                                 	call	@2
                                 	.endmacro
                                 .macro	CB1	; reg,bit,addr		; call if bit=1
                                 	sbrc	@0,@1
                                 	call	@2
                                 	.endmacro
                                 .macro	WB0	; reg,bit		; wait if bit=0
                                 	sbrs	@0,@1
                                 	rjmp	PC-1
                                 	.endmacro
                                 .macro	WB1	; reg,bit		; wait if bit=1
                                 	sbrc	@0,@1
                                 	rjmp	PC-1
                                 	.endmacro
                                 .macro	RB0	; reg,bit		; return if bit=0
                                 	sbrs	@0,@1
                                 	ret
                                 	.endmacro
                                 .macro	RB1	; reg,bit		; return if bit=1
                                 	sbrc	@0,@1
                                 	ret
                                 	.endmacro
                                 
                                 ; wait if bit=0 with timeout
                                 ; if timeout (in units of 5 cyc) then jump to addr
                                 .macro	WB0T	; reg,bit,timeout,addr
                                 	ldi	w,@2+1
                                 	dec	w	; 1 cyc
                                 	breq	@3	; 1 cyc
                                 	sbrs	@0,@1	; 1 cyc
                                 	rjmp	PC-3	; 2 cyc = 5 cycles
                                 	.endmacro
                                 
                                 ; wait if bit=1 with timeout
                                 ; if timeout (in units of 5 cyc) then jump to addr	
                                 .macro	WB1T	; reg,bit,timeout,addr
                                 	ldi	w,@2+1
                                 	dec	w	; 1 cyc
                                 	breq	@3	; 1 cyc
                                 	sbrc	@0,@1	; 1 cyc
                                 	rjmp	PC-3	; 2 cyc = 5 cycles
                                 	.endmacro	
                                 	
                                 ; --- operations based on port bits ---
                                 .macro	P0	; port,bit		; port=0
                                 	cbi	@0,@1
                                 	.endmacro
                                 .macro	P1	; port,bit		; port=1
                                 	sbi	@0,@1
                                 	.endmacro
                                 .macro	SP0	; port,bit		; skip if port=0
                                 	sbic	@0,@1
                                 	.endmacro
                                 .macro	SP1	; port,bit		; skip if port=1
                                 	sbis	@0,@1
                                 	.endmacro
                                 .macro	JP0	; port,bit,addr		; jump if port=0
                                 	sbis	@0,@1
                                 	rjmp	@2
                                 	.endmacro
                                 .macro	JP1	; port,bit,addr		; jump if port=1
                                 	sbic	@0,@1
                                 	rjmp	@2
                                 	.endmacro
                                 .macro	CP0	; port,bit,addr		; call if port=0
                                 	sbis	@0,@1
                                 	rcall	@2
                                 	.endmacro
                                 .macro	CP1	; port,bit,addr		; call if port=1
                                 	sbic	@0,@1
                                 	rcall	@2
                                 	.endmacro
                                 .macro	WP0	; port,bit		; wait if port=0
                                 	sbis	@0,@1
                                 	rjmp	PC-1
                                 	.endmacro
                                 .macro	WP1	; port,bit		; wait if port=1
                                 	sbic	@0,@1
                                 	rjmp	PC-1
                                 	.endmacro
                                 .macro	RP0	; port,bit		; return if port=0
                                 	sbis	@0,@1
                                 	ret
                                 	.endmacro
                                 .macro	RP1	; port,bit		; return if port=1
                                 	sbic	@0,@1
                                 	ret
                                 	.endmacro
                                 
                                 ; wait if port=0 with timeout
                                 ; if timeout (in units of 5 cyc) then jump to addr
                                 .macro	WP0T	; port,bit,timeout,addr
                                 	ldi	w,@2+1
                                 	dec	w	; 1 cyc
                                 	breq	@3	; 1 cyc
                                 	sbis	@0,@1	; 1 cyc
                                 	rjmp	PC-3	; 2 cyc = 5 cycles
                                 	.endmacro
                                 
                                 ; wait if port=1 with timeout
                                 ; if timeout (in units of 5 cyc) then jump to addr	
                                 .macro	WP1T	; port,bit,timeout,addr
                                 	ldi	w,@2+1
                                 	dec	w	; 1 cyc
                                 	breq	@3	; 1 cyc
                                 	sbic	@0,@1	; 1 cyc
                                 	rjmp	PC-3	; 2 cyc = 5 cycles
                                 	.endmacro	
                                 
                                 ; ===========================
                                 ; 	multi-byte operations
                                 ; ===========================
                                 
                                 .macro	SWAP4			; swap 2 variables
                                 	mov	w ,@0
                                 	mov	@0,@4
                                 	mov	@4,w
                                 	mov	w ,@1
                                 	mov	@1,@5
                                 	mov	@5,w
                                 	mov	w ,@2
                                 	mov	@2,@6
                                 	mov	@6,w
                                 	mov	w ,@3
                                 	mov	@3,@7
                                 	mov	@7,w
                                 	.endmacro
                                 .macro	SWAP3
                                 	mov	w ,@0
                                 	mov	@0,@3
                                 	mov	@3,w
                                 	mov	w ,@1
                                 	mov	@1,@4
                                 	mov	@4,w
                                 	mov	w ,@2
                                 	mov	@2,@5
                                 	mov	@5,w
                                 	.endmacro
                                 .macro	SWAP2
                                 	mov	w ,@0
                                 	mov	@0,@2
                                 	mov	@2,w
                                 	mov	w ,@1
                                 	mov	@1,@3
                                 	mov	@3,w
                                 	.endmacro
                                 .macro	SWAP1
                                 	mov	w ,@0
                                 	mov	@0,@1
                                 	mov	@1,w
                                 	.endmacro
                                 
                                 .macro	LDX4	;r..r0		; load from (x+)
                                 	ld	@3,x+
                                 	ld	@2,x+	
                                 	ld	@1,x+
                                 	ld	@0,x+
                                 	.endmacro
                                 .macro	LDX3	;r..r0
                                 	ld	@2,x+	
                                 	ld	@1,x+
                                 	ld	@0,x+
                                 	.endmacro
                                 .macro	LDX2	;r..r0	
                                 	ld	@1,x+
                                 	ld	@0,x+
                                 	.endmacro
                                 	
                                 .macro	LDY4	;r..r0		; load from (y+)
                                 	ld	@3,y+
                                 	ld	@2,y+	
                                 	ld	@1,y+
                                 	ld	@0,y+
                                 	.endmacro
                                 .macro	LDY3	;r..r0
                                 	ld	@2,y+	
                                 	ld	@1,y+
                                 	ld	@0,y+
                                 	.endmacro
                                 .macro	LDY2	;r..r0	
                                 	ld	@1,y+
                                 	ld	@0,y+
                                 	.endmacro
                                 
                                 .macro	LDZ4	;r..r0		; load from (z+)
                                 	ld	@3,z+
                                 	ld	@2,z+	
                                 	ld	@1,z+
                                 	ld	@0,z+
                                 	.endmacro
                                 .macro	LDZ3	;r..r0
                                 	ld	@2,z+	
                                 	ld	@1,z+
                                 	ld	@0,z+
                                 	.endmacro
                                 .macro	LDZ2	;r..r0
                                 	ld	@1,z+
                                 	ld	@0,z+
                                 	.endmacro
                                 
                                 .macro	STX4	;r..r0		; store to (x+)
                                 	st	x+,@3
                                 	st	x+,@2	
                                 	st	x+,@1
                                 	st	x+,@0
                                 	.endmacro
                                 .macro	STX3	;r..r0
                                 	st	x+,@2	
                                 	st	x+,@1
                                 	st	x+,@0
                                 	.endmacro
                                 .macro	STX2	;r..r0
                                 	st	x+,@1
                                 	st	x+,@0
                                 	.endmacro
                                 	
                                 .macro	STY4	;r..r0		; store to (y+)
                                 	st	y+,@3
                                 	st	y+,@2	
                                 	st	y+,@1
                                 	st	y+,@0
                                 	.endmacro
                                 .macro	STY3	;r..r0
                                 	st	y+,@2	
                                 	st	y+,@1
                                 	st	y+,@0
                                 	.endmacro
                                 .macro	STY2	;r..r0	
                                 	st	y+,@1
                                 	st	y+,@0
                                 	.endmacro
                                 	
                                 .macro	STZ4	;r..r0		; store to (z+)
                                 	st	z+,@3
                                 	st	z+,@2	
                                 	st	z+,@1
                                 	st	z+,@0
                                 	.endmacro	
                                 .macro	STZ3	;r..r0
                                 	st	z+,@2	
                                 	st	z+,@1
                                 	st	z+,@0
                                 	.endmacro	
                                 .macro	STZ2	;r..r0	
                                 	st	z+,@1
                                 	st	z+,@0
                                 	.endmacro	
                                 	
                                 .macro	STI4	;addr,k		; store immediate
                                 	ldi	w,  low(@1)
                                 	sts	@0+0,w
                                 	ldi	w, high(@1)
                                 	sts	@0+1,w
                                 	ldi	w,byte3(@1)
                                 	sts	@0+2,w
                                 	ldi	w,byte4(@1)
                                 	sts	@0+3,w	
                                 	.endmacro	
                                 .macro	STI3	;addr,k
                                 	ldi	w,  low(@1)
                                 	sts	@0+0,w
                                 	ldi	w, high(@1)
                                 	sts	@0+1,w
                                 	ldi	w,byte3(@1)
                                 	sts	@0+2,w
                                 	.endmacro	
                                 .macro	STI2	;addr,k
                                 	ldi	w,  low(@1)
                                 	sts	@0+0,w
                                 	ldi	w, high(@1)
                                 	sts	@0+1,w
                                 	.endmacro
                                 .macro	STI	;addr,k
                                 	ldi	w,@1
                                 	sts	@0,w
                                 	.endmacro
                                 
                                 .macro	INC4			; increment
                                 	ldi	w,0xff
                                 	sub	@3,w
                                 	sbc	@2,w
                                 	sbc	@1,w
                                 	sbc	@0,w
                                 	.endmacro
                                 .macro	INC3
                                 	ldi	w,0xff
                                 	sub	@2,w
                                 	sbc	@1,w
                                 	sbc	@0,w
                                 	.endmacro
                                 .macro	INC2
                                 	ldi	w,0xff
                                 	sub	@1,w
                                 	sbc	@0,w
                                 	.endmacro
                                 
                                 .macro	DEC4			; decrement
                                 	ldi	w,0xff
                                 	add	@3,w
                                 	adc	@2,w
                                 	adc	@1,w
                                 	adc	@0,w
                                 	.endmacro
                                 .macro	DEC3
                                 	ldi	w,0xff
                                 	add	@2,w
                                 	adc	@1,w
                                 	adc	@0,w
                                 	.endmacro
                                 .macro	DEC2
                                 	ldi	w,0xff
                                 	add	@1,w
                                 	adc	@0,w
                                 	.endmacro
                                 
                                 .macro	CLR9			; clear (also clears the carry)
                                 	sub	@0,@0
                                 	clr	@1
                                 	clr	@2
                                 	clr	@3
                                 	clr	@4
                                 	clr	@5
                                 	clr	@6
                                 	clr	@7
                                 	clr	@8
                                 	.endmacro
                                 .macro	CLR8
                                 	sub	@0,@0
                                 	clr	@1
                                 	clr	@2
                                 	clr	@3
                                 	clr	@4
                                 	clr	@5
                                 	clr	@6
                                 	clr	@7
                                 	.endmacro
                                 .macro	CLR7
                                 	sub	@0,@0
                                 	clr	@1
                                 	clr	@2
                                 	clr	@3
                                 	clr	@4
                                 	clr	@5
                                 	clr	@6
                                 	.endmacro
                                 .macro	CLR6
                                 	sub	@0,@0
                                 	clr	@1
                                 	clr	@2
                                 	clr	@3
                                 	clr	@4
                                 	clr	@5
                                 	.endmacro
                                 .macro	CLR5
                                 	sub	@0,@0
                                 	clr	@1
                                 	clr	@2
                                 	clr	@3
                                 	clr	@4
                                 	.endmacro
                                 .macro	CLR4
                                 	sub	@0,@0
                                 	clr	@1
                                 	clr	@2
                                 	clr	@3
                                 	.endmacro
                                 .macro	CLR3
                                 	sub	@0,@0
                                 	clr	@1
                                 	clr	@2
                                 	.endmacro
                                 .macro	CLR2
                                 	sub	@0,@0
                                 	clr	@1
                                 	.endmacro
                                 
                                 .macro	COM4			; one's complement
                                 	com	@0
                                 	com	@1
                                 	com	@2
                                 	com	@3
                                 	.endmacro
                                 .macro	COM3
                                 	com	@0
                                 	com	@1
                                 	com	@2
                                 	.endmacro
                                 .macro	COM2
                                 	com	@0
                                 	com	@1
                                 	.endmacro
                                 
                                 .macro	NEG4			; negation (two's complement)
                                 	com	@0
                                 	com	@1
                                 	com	@2
                                 	com	@3
                                 	ldi	w,0xff
                                 	sub	@3,w
                                 	sbc	@2,w
                                 	sbc	@1,w
                                 	sbc	@0,w
                                 	.endmacro
                                 .macro	NEG3
                                 	com	@0
                                 	com	@1
                                 	com	@2
                                 	ldi	w,0xff
                                 	sub	@2,w
                                 	sbc	@1,w
                                 	sbc	@0,w
                                 	.endmacro
                                 .macro	NEG2
                                 	com	@0
                                 	com	@1
                                 	ldi	w,0xff
                                 	sub	@1,w
                                 	sbc	@0,w
                                 	.endmacro
                                 	
                                 .macro	LDI4 	; r..r0, k	; load immediate
                                 	ldi	@3,  low(@4)
                                 	ldi	@2, high(@4)
                                 	ldi	@1,byte3(@4)
                                 	ldi	@0,byte4(@4)
                                 	.endmacro
                                 .macro	LDI3
                                 	ldi	@2,  low(@3)
                                 	ldi	@1, high(@3)
                                 	ldi	@0,byte3(@3)
                                 	.endmacro
                                 .macro	LDI2
                                 	ldi	@1,  low(@2)
                                 	ldi	@0, high(@2)
                                 	.endmacro
                                 
                                 .macro	LDS4			; load direct from SRAM
                                 	lds	@3,@4
                                 	lds	@2,@4+1
                                 	lds	@1,@4+2
                                 	lds	@0,@4+3
                                 	.endmacro
                                 .macro	LDS3
                                 	lds	@2,@3
                                 	lds	@1,@3+1
                                 	lds	@0,@3+2
                                 	.endmacro
                                 .macro	LDS2
                                 	lds	@1,@2
                                 	lds	@0,@2+1
                                 	.endmacro
                                 
                                 .macro	STS4			; store direct to SRAM
                                 	sts	@0+0,@4
                                 	sts	@0+1,@3
                                 	sts	@0+2,@2
                                 	sts	@0+3,@1
                                 	.endmacro
                                 .macro	STS3
                                 	sts	@0+0,@3
                                 	sts	@0+1,@2
                                 	sts	@0+2,@1
                                 	.endmacro
                                 .macro	STS2
                                 	sts	@0+0,@2
                                 	sts	@0+1,@1
                                 	.endmacro
                                 
                                 .macro	STDZ4	; d, r3,r2,r1,r0
                                 	std	z+@0+0,@4
                                 	std	z+@0+1,@3
                                 	std	z+@0+2,@2
                                 	std	z+@0+3,@1
                                 	.endmacro
                                 .macro	STDZ3	; d, r2,r1,r0
                                 	std	z+@0+0,@3
                                 	std	z+@0+1,@2
                                 	std	z+@0+2,@1
                                 	.endmacro
                                 .macro	STDZ2	; d, r1,r0
                                 	std	z+@0+0,@2
                                 	std	z+@0+1,@1
                                 	.endmacro
                                 	
                                 .macro	LPM4			; load program memory
                                 	lpm
                                 	mov	@3,r0
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@2,r0
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@1,r0
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@0,r0
                                 	adiw	zl,1
                                 	.endmacro
                                 .macro	LPM3
                                 	lpm
                                 	mov	@2,r0
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@1,r0
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@0,r0
                                 	adiw	zl,1
                                 	.endmacro
                                 .macro	LPM2
                                 	lpm
                                 	mov	@1,r0
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@0,r0
                                 	adiw	zl,1
                                 	.endmacro
                                 .macro	LPM1
                                 	lpm
                                 	mov	@0,r0
                                 	adiw	zl,1
                                 	.endmacro
                                 
                                 .macro	MOV4			; move between registers
                                 	mov	@3,@7
                                 	mov	@2,@6
                                 	mov	@1,@5
                                 	mov	@0,@4
                                 	.endmacro
                                 .macro	MOV3
                                 	mov	@2,@5
                                 	mov	@1,@4
                                 	mov	@0,@3
                                 	.endmacro
                                 .macro	MOV2
                                 	mov	@1,@3
                                 	mov	@0,@2
                                 	.endmacro
                                 
                                 .macro	ADD4			; add
                                 	add	@3,@7
                                 	adc	@2,@6
                                 	adc	@1,@5
                                 	adc	@0,@4
                                 	.endmacro
                                 .macro	ADD3
                                 	add	@2,@5
                                 	adc	@1,@4
                                 	adc	@0,@3
                                 	.endmacro
                                 .macro	ADD2
                                 	add	@1,@3
                                 	adc	@0,@2
                                 	.endmacro
                                 
                                 .macro	SUB4			; subtract
                                 	sub	@3,@7
                                 	sbc	@2,@6
                                 	sbc	@1,@5
                                 	sbc	@0,@4
                                 	.endmacro
                                 .macro	SUB3
                                 	sub	@2,@5
                                 	sbc	@1,@4
                                 	sbc	@0,@3
                                 	.endmacro
                                 .macro	SUB2
                                 	sub	@1,@3
                                 	sbc	@0,@2
                                 	.endmacro
                                 	
                                 .macro	CP4			; compare
                                 	cp	@3,@7
                                 	cpc	@2,@6
                                 	cpc	@1,@5
                                 	cpc	@0,@4
                                 	.endmacro
                                 .macro	CP3
                                 	cp	@2,@5
                                 	cpc	@1,@4
                                 	cpc	@0,@3
                                 	.endmacro
                                 .macro	CP2
                                 	cp	@1,@3
                                 	cpc	@0,@2
                                 	.endmacro
                                 
                                 .macro	TST4			; test
                                 	clr	w
                                 	cp	@3,w
                                 	cpc	@2,w
                                 	cpc	@1,w
                                 	cpc	@0,w
                                 	.endmacro
                                 .macro	TST3
                                 	clr	w
                                 	cp	@2,w
                                 	cpc	@1,w
                                 	cpc	@0,w
                                 	.endmacro
                                 .macro	TST2
                                 	clr	w
                                 	cp	@1,w
                                 	cpc	@0,w
                                 	.endmacro
                                 
                                 .macro	ADDI4			; add immediate
                                 	subi	@3,  low(-@4)
                                 	sbci	@2, high(-@4)
                                 	sbci	@1,byte3(-@4)
                                 	sbci	@0,byte4(-@4)
                                 	.endmacro
                                 .macro	ADDI3
                                 	subi	@2,  low(-@3)
                                 	sbci	@1, high(-@3)
                                 	sbci	@0,byte3(-@3)
                                 	.endmacro
                                 .macro	ADDI2
                                 	subi	@1,  low(-@2)
                                 	sbci	@0, high(-@2)
                                 	.endmacro
                                 	
                                 .macro	SUBI4			; subtract immediate
                                 	subi	@3,  low(@4)
                                 	sbci	@2, high(@4)
                                 	sbci	@1,byte3(@4)
                                 	sbci	@0,byte4(@4)
                                 	.endmacro
                                 .macro	SUBI3
                                 	subi	@2,  low(@3)
                                 	sbci	@1, high(@3)
                                 	sbci	@0,byte3(@3)
                                 	.endmacro
                                 .macro	SUBI2
                                 	subi	@1,  low(@2)
                                 	sbci	@0, high(@2)
                                 	.endmacro
                                 
                                 .macro	LSL5			; logical shift left
                                 	lsl	@4
                                 	rol	@3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	LSL4
                                 	lsl	@3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	LSL3
                                 	lsl	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	LSL2
                                 	lsl	@1
                                 	rol	@0
                                 	.endmacro
                                 	
                                 .macro	LSR4			; logical shift right
                                 	lsr	@0
                                 	ror	@1
                                 	ror	@2
                                 	ror	@3
                                 	.endmacro
                                 .macro	LSR3
                                 	lsr	@0
                                 	ror	@1
                                 	ror	@2
                                 	.endmacro
                                 .macro	LSR2
                                 	lsr	@0
                                 	ror	@1
                                 	.endmacro
                                 
                                 .macro	ASR4			; arithmetic shift right
                                 	asr	@0
                                 	ror	@1
                                 	ror	@2
                                 	ror	@3
                                 	.endmacro
                                 .macro	ASR3
                                 	asr	@0
                                 	ror	@1
                                 	ror	@2
                                 	.endmacro
                                 .macro	ASR2
                                 	asr	@0
                                 	ror	@1
                                 	.endmacro
                                 
                                 .macro	ROL8			; rotate left through carry
                                 	rol	@7
                                 	rol	@6
                                 	rol	@5
                                 	rol	@4
                                 	rol	@3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	ROL7
                                 	rol	@6
                                 	rol	@5
                                 	rol	@4
                                 	rol	@3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	ROL6
                                 	rol	@5
                                 	rol	@4
                                 	rol	@3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	ROL5
                                 	rol	@4
                                 	rol	@3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	ROL4
                                 	rol	@3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	ROL3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	ROL2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 
                                 .macro	ROR8			; rotate right through carry
                                 	ror	@0
                                 	ror	@1
                                 	ror	@2
                                 	ror	@3
                                 	ror	@4
                                 	ror	@5
                                 	ror	@6
                                 	ror	@7
                                 	.endmacro
                                 .macro	ROR7
                                 	ror	@0
                                 	ror	@1
                                 	ror	@2
                                 	ror	@3
                                 	ror	@4
                                 	ror	@5
                                 	ror	@6
                                 	.endmacro
                                 .macro	ROR6
                                 	ror	@0
                                 	ror	@1
                                 	ror	@2
                                 	ror	@3
                                 	ror	@4
                                 	ror	@5
                                 	.endmacro
                                 .macro	ROR5
                                 	ror	@0
                                 	ror	@1
                                 	ror	@2
                                 	ror	@3
                                 	ror	@4
                                 	.endmacro	
                                 .macro	ROR4
                                 	ror	@0
                                 	ror	@1
                                 	ror	@2
                                 	ror	@3
                                 	.endmacro
                                 .macro	ROR3
                                 	ror	@0
                                 	ror	@1
                                 	ror	@2
                                 	.endmacro
                                 .macro	ROR2
                                 	ror	@0
                                 	ror	@1
                                 	.endmacro
                                 
                                 .macro	PUSH2
                                 	push	@0
                                 	push	@1
                                 	.endmacro	
                                 .macro	POP2
                                 	pop	@1
                                 	pop	@0
                                 	.endmacro
                                 
                                 .macro	PUSH3
                                 	push	@0
                                 	push	@1
                                 	push	@2
                                 	.endmacro	
                                 .macro	POP3
                                 	pop	@2
                                 	pop	@1
                                 	pop	@0
                                 	.endmacro
                                 	
                                 .macro	PUSH4
                                 	push	@0
                                 	push	@1
                                 	push	@2
                                 	push	@3
                                 	.endmacro	
                                 .macro	POP4
                                 	pop	@3
                                 	pop	@2
                                 	pop	@1
                                 	pop	@0
                                 	.endmacro	
                                 	
                                 .macro	PUSH5
                                 	pop	@0
                                 	pop	@1
                                 	pop	@2
                                 	pop	@3
                                 	pop	@4
                                 	.endmacro	
                                 .macro	POP5
                                 	pop	@4
                                 	pop	@3
                                 	pop	@2
                                 	pop	@1
                                 	pop	@0
                                 	.endmacro	
                                 
                                 ; --- SRAM operations ---
                                 .macro	INCS4	; sram		; increment SRAM 4-byte variable
                                 	lds	w,@0
                                 	inc	w
                                 	sts	@0,w
                                 	brne	end
                                 	lds	w,@0+1
                                 	inc	w
                                 	sts	@0+1,w
                                 	brne	end
                                 	lds	w,@0+2
                                 	inc	w
                                 	sts	@0+2,w
                                 	brne	end
                                 	lds	w,@0+3
                                 	inc	w
                                 	sts	@0+3,w
                                 end:	
                                 	.endmacro
                                 
                                 .macro	INCS3	; sram		; increment SRAM 3-byte variable
                                 	lds	w,@0
                                 	inc	w
                                 	sts	@0,w
                                 	brne	end
                                 	lds	w,@0+1
                                 	inc	w
                                 	sts	@0+1,w
                                 	brne	end
                                 	lds	w,@0+2
                                 	inc	w
                                 	sts	@0+2,w
                                 end:	
                                 	.endmacro
                                 
                                 .macro	INCS2	; sram		; increment SRAM 2-byte variable
                                 	lds	w,@0
                                 	inc	w
                                 	sts	@0,w
                                 	brne	end
                                 	lds	w,@0+1
                                 	inc	w
                                 	sts	@0+1,w
                                 end:	
                                 	.endmacro
                                 
                                 .macro	INCS	; sram		; increment SRAM 1-byte variable
                                 	lds	w,@0
                                 	inc	w
                                 	sts	@0,w
                                 	.endmacro
                                 
                                 .macro	DECS4	; sram		; decrement SRAM 4-byte variable
                                 	ldi	w,1
                                 	lds	u,@0
                                 	sub	u,w
                                 	sts	@0,u
                                 	clr	w
                                 	lds	u,@0+1
                                 	sbc	u,w
                                 	sts	@0+1,u
                                 	lds	u,@0+2
                                 	sbc	u,w
                                 	sts	@0+2,u
                                 	lds	u,@0+3
                                 	sbc	u,w
                                 	sts	@0+3,u
                                 	.endmacro
                                 .macro	DECS3	; sram		; decrement SRAM 3-byte variable
                                 	ldi	w,1
                                 	lds	u,@0
                                 	sub	u,w
                                 	sts	@0,u
                                 	clr	w
                                 	lds	u,@0+1
                                 	sbc	u,w
                                 	sts	@0+1,u
                                 	lds	u,@0+2
                                 	sbc	u,w
                                 	sts	@0+2,u
                                 	.endmacro
                                 .macro	DECS2	; sram		; decrement SRAM 2-byte variable
                                 	ldi	w,1
                                 	lds	u,@0
                                 	sub	u,w
                                 	sts	@0,u
                                 	clr	w
                                 	lds	u,@0+1
                                 	sbc	u,w
                                 	sts	@0+1,u
                                 	.endmacro
                                 .macro	DECS	; sram		; decrement
                                 	lds	w,@0
                                 	dec	w
                                 	sts	@0,w
                                 	.endmacro
                                 
                                 .macro	MOVS4	; addr0,addr1	; [addr0] <-- [addr1]
                                 	lds	w,@1
                                 	sts	@0,w
                                 	lds	w,@1+1
                                 	sts	@0+1,w
                                 	lds	w,@1+2
                                 	sts	@0+2,w
                                 	lds	w,@3+1
                                 	sts	@0+3,w	
                                 	.endmacro
                                 .macro	MOVS3	; addr0,addr1	; [addr0] <-- [addr1]
                                 	lds	w,@1
                                 	sts	@0,w
                                 	lds	w,@1+1
                                 	sts	@0+1,w
                                 	lds	w,@1+2
                                 	sts	@0+2,w
                                 	.endmacro
                                 .macro	MOVS2	; addr0,addr1	; [addr0] <-- [addr1]
                                 	lds	w,@1
                                 	sts	@0,w
                                 	lds	w,@1+1
                                 	sts	@0+1,w
                                 	.endmacro
                                 .macro	MOVS	; addr0,addr1	; [addr0] <-- [addr1]
                                 	lds	w,@1
                                 	sts	@0,w
                                 	.endmacro
                                 
                                 .macro	SEXT	; reg1,reg0	; sign extend
                                 	clr	@0
                                 	sbrc	@1,7
                                 	dec	@0
                                 	.endmacro
                                 
                                 ; =======================================
                                 ;	Jump/Call with constant arguments
                                 ; =======================================
                                 	
                                 ; --- calls with arguments a,b,XYZ ---
                                 .macro	CX	; subroutine,x
                                 	ldi	xl, low(@1)
                                 	ldi	xh,high(@1)
                                 	rcall	@0
                                 	.endmacro
                                 .macro	CXY	; subroutine,x,y
                                 	ldi	xl, low(@1)
                                 	ldi	xh,high(@1)
                                 	ldi	yl, low(@2)
                                 	ldi	yh,high(@2)	
                                 	rcall	@0
                                 	.endmacro		
                                 .macro	CXZ	; subroutine,x,z
                                 	ldi	xl, low(@1)
                                 	ldi	xh,high(@1)
                                 	ldi	zl, low(@2)
                                 	ldi	zh,high(@2)	
                                 	rcall	@0
                                 	.endmacro		
                                 .macro	CXYZ	; subroutine,x,y,z
                                 	ldi	xl, low(@1)
                                 	ldi	xh,high(@1)
                                 	ldi	yl, low(@2)
                                 	ldi	yh,high(@2)
                                 	ldi	zl, low(@3)
                                 	ldi	zh,high(@3)		
                                 	rcall	@0
                                 	.endmacro
                                 .macro	CW	; subroutine,w
                                 	ldi	w, @1
                                 	rcall	@0
                                 	.endmacro
                                 .macro	CA	; subroutine,a
                                 	ldi	a0, @1
                                 	rcall	@0
                                 	.endmacro
                                 .macro	CAB	; subroutine,a,b
                                 	ldi	a0, @1
                                 	ldi	b0, @2
                                 	rcall	@0
                                 	.endmacro
                                 
                                 ; --- jump with arguments w,a,b ---
                                 .macro	JW	; subroutine,w
                                 	ldi	w, @1
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	JA	; subroutine,a
                                 	ldi	a0, @1
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	JAB	; subroutine,a,b
                                 	ldi	a0, @1
                                 	ldi	b0, @2
                                 	rjmp	@0
                                 	.endmacro
                                 .list
                                 
                                 
                                 
                                  reset:
000000 ef0f
000001 bf0d
000002 e100
000003 bf0e                      	LDSP	RAMEND	
                                    ;rcall	all initializations
000004 d39f                      	rcall LCD_init
000005 ef0f                      	ldi r16, 0xff
000006 bb07                      	out DDRB, r16
000007 e000                      	ldi r16, 0x00
000008 bb01                      	out DDRD, r16
                                 
000009 c3c0                      	rjmp	main
                                 
                                 .include "printf.asm"
                                 
                                 ; purpose library, formatted output generation
                                 ; author (c) R.Holzer (adapted MICRO210/EE208 A.Schmid)
                                 
                                 ; === description ===
                                 ; 
                                 ; The program "printf" interprets and prints formatted strings.
                                 ; The special formatting characters regognized are:
                                 ;
                                 ; FDEC	decimal number
                                 ; FHEX	hexadecimal number
                                 ; FBIN	binary number
                                 ; FFRAC	fixed fraction number
                                 ; FCHAR	single ASCII character
                                 ; FSTR	zero-terminated ASCII string
                                 	
                                 ; The special formatting characters are distinguished from normal 
                                 ; ASCII characters by having bit7 set to 1.
                                 
                                 ; Signification of bit fields:
                                 ;
                                 ; b 	bytes		1..4 b bytes		2
                                 ; s 	sign		0(unsigned), 1(signed)	1
                                 ; i		integer digits	
                                 ; e 	base		2,,36			5
                                 ; dp 	dec. point	0..32			5
                                 ; $if	i=integer digits,  0=all digits,  1..15 digits 
                                 ;		f=fraction digits, 0=no fraction, 1..15 digits
                                 ;
                                 ; Formatting characters must be followed by an SRAM address (0..ff)
                                 ; FBIN,	sram
                                 ; FHEX,	sram
                                 ; FDEC,	sram
                                 ; FCHAR,sram
                                 ; FSTR,	sram
                                 ;
                                 ; The address 'sram' is a 1-byte constant. It addresses
                                 ; 	 0..1f	registers r0..r31, 
                                 ; 	20..3f	i/o ports, (need to be addressed with an offset of $20)
                                 ;	60..ff	SRAM registers (warning: extended i/o in AVR128)
                                 
                                 ; The FFRAC formatting character must be followed by 
                                 ;	ONE sram address and 
                                 ;	TWO more formatting characters
                                 ; FFRAC,sram,dp,$if
                                 
                                 ; dp	decimal point position, 0=right, 32=left
                                 ; $if	format i.f, i=integer digits, f=fraction digits
                                 
                                 ; The special formatting characters use the following coding
                                 ;
                                 ; FDEC	11bb'iiis	i=0 all digits, i=1-7 digits
                                 ; FBIN	101i'iiis	i=0 8 digits,	i=1-7 digits
                                 ; FHEX	1001'iiis	i=0 8 digits,	i=1-7 digits
                                 ; FFRAC	1000'1bbs
                                 ; FCHAR	1000'0100
                                 ; FSTR	1000'0101
                                 ; FREP	1000'0110
                                 ; FFUNC	1000'0111
                                 ;	1000'0010
                                 ;	1000'0011
                                 ; FESC	1000'0000
                                 
                                 ; examples
                                 ; formatting string			printing
                                 ; "a=",FDEC,a,0				1-byte variable a, unsigned decimal
                                 ; "a=",FDEC2,a,0			2-byte variable a (a1,a0), unsigend
                                 ; "a=",FDEC|FSIGN,a,0		1-byte variable 1, signed decimal
                                 ; "n=",FBIN,PIND+$20,0		i/o port, binary, notice offset of $20
                                 ; "f=",FFRAC4|FSIGN,a,16,$88,0	4-byte signed fixed-point fraction
                                 ;				dec.point at 16, 8 int.digits, 8 frac.digits	
                                 ; "f=",FFRAC2,a,16,$18,0		2-byte unsigned fixed-point fraction
                                 ;				dec.point at 16, 1 int.digits, 8 frac.digits	
                                 ; "a=",FDEC|FDIG5|FSIGN,a,0	1-byte variable, 5-digit, decimal, signed
                                 ; "a=",FDEC|FDIG5,a,0		1-byte variable, 5-digit, decimal, unsigned
                                 
                                 ; === registers modified ===
                                 ; e0,e1	used to transmit address of putc routine
                                 ; zh,zl	used as pointer to prog-memory
                                 
                                 ; === constants ==============================================
                                 
                                 .equ	FDEC	= 0b11000000	; 1-byte variable
                                 .equ	FDEC2	= 0b11010000	; 2-byte variable
                                 .equ	FDEC3	= 0b11100000	; 3-byte variable
                                 .equ	FDEC4	= 0b11110000	; 4-byte variable
                                 
                                 .equ	FBIN	= 0b10100000
                                 .equ	FHEX	= 0b10010100	; 1-byte variable
                                 .equ	FHEX2	= 0b10011000	; 2-byte variable
                                 .equ	FHEX3	= 0b10011100	; 3-byte variable
                                 .equ	FHEX4	= 0b10010000	; 4-byte variable
                                 
                                 .equ	FFRAC	= 0b10001000	; 1-byte variable
                                 .equ	FFRAC2	= 0b10001010	; 2-byte variable
                                 .equ	FFRAC3	= 0b10001100	; 3-byte variable
                                 .equ	FFRAC4	= 0b10001110	; 4-byte variable
                                 
                                 .equ	FCHAR	= 0b10000100
                                 .equ	FSTR	= 0b10000101
                                 
                                 .equ	FSIGN	= 0b00000001
                                 
                                 .equ	FDIG1	= 1<<1
                                 .equ	FDIG2	= 2<<1
                                 .equ	FDIG3	= 3<<1	
                                 .equ	FDIG4	= 4<<1
                                 .equ	FDIG5	= 5<<1
                                 .equ	FDIG6	= 6<<1
                                 .equ	FDIG7	= 7<<1
                                 
                                 ; ===macro ====================================================
                                 
                                 .macro	PRINTF			; putc function (UART, LCD...)
                                 	ldi	w, low(@0)		; address of "putc" in e1:d0
                                 	mov	e0,w
                                 	ldi	w,high(@0)
                                 	mov	e1,w
                                 	call	_printf
                                 	.endmacro
                                 
                                 ; mod	y,z
                                 
                                 
                                 ; === routines ================================================
                                 
                                 _printf:
00000a 91ff
00000b 91ef                      	POPZ			; z points to begin of "string"
00000c 0fee
00000d 1fff                      	MUL2Z			; multiply Z by two, (word ptr -> byte ptr)
00000e 93af
00000f 93bf                      	PUSHX
                                 		
                                 _printf_read:
000010 95c8                      	lpm				; places prog_mem(Z) into r0 (=c)
000011 9631                      	adiw	zl,1	; increment pointer Z
000012 2000                      	tst	r0			; test for ZERO (=end of string)
000013 f021                      	breq	_printf_end	; char=0 indicates end of ascii string
000014 f04a                      	brmi	_printf_formatted ; bit7=1 indicates formatting character
000015 2d00                      	mov	w,r0
000016 d013                      	rcall	_putw	; display the character
000017 cff8                      	rjmp	_printf_read	; read next character in the string
                                 	
                                 _printf_end:
000018 9631                      	adiw	zl,1	; point to the next character
000019 95f6
00001a 95e7                      	DIV2Z			; divide by 2 (byte ptr -> word ptr)
00001b 91bf
00001c 91af                      	POPX
00001d 9409                      	ijmp			; return to instruction after "string"
                                 
                                 _printf_formatted:
                                 
                                 ; FDEC	11bb'iiis
                                 ; FBIN	101i'iiis
                                 ; FHEX	1001'iiis
                                 ; FFRAC	1000'1bbs
                                 ; FCHAR	1000'0100
                                 ; FSTR	1000'0101
                                 
00001e fa00                      	bst	r0,0		; store sign in T
00001f 2d00                      	mov	w,r0		; store formatting character in w
                                 
000020 95c8                      	lpm	
000021 2da0                      	mov	xl,r0		; load x-pointer with SRAM address
000022 27bb                      	clr	xh			; clear high-byte
000023 9631                       	adiw	zl,1	; increment pointer Z
                                 
                                 ;	JB1	w,6,_putdec
                                 ;	JB1	w,5,_putbin
                                 ;	JB1	w,4,_puthex
                                 ;	JB1	w,3,_putfrac
000024 3804
000025 f079                      	JK	w,FCHAR,_putchar
000026 3805
000027 f081                      	JK	w,FSTR ,_putstr
000028 c015                      	rjmp	_putnum
                                 	
000029 cfe6                      	rjmp	_printf_read	
                                 
                                 ; === putc (put character) ===============================
                                 ; in	w	character to put
                                 ;	e1,e0	address of output routine (UART, LCD putc)
                                 _putw:
00002a 932f
00002b 93ff
00002c 93ef                      	PUSH3	a0,zh,zl
00002d 2de4
00002e 2df5
00002f 2f20                      	MOV3	a0,zh,zl, w,e1,e0
000030 9509                      	icall			; indirect call to "putc"
000031 91ef
000032 91ff
000033 912f                      	POP3	a0,zh,zl
000034 9508                      	ret
                                 
                                 ; === putchar (put character) ============================
                                 ; in	x	pointer to character to put
                                 _putchar:
000035 910c                      	ld	w,x
000036 dff3                      	rcall	_putw
000037 cfd8                      	rjmp	_printf_read
                                 	
                                 ; === putstr (put string) ================================
                                 ; in	x	pointer to ascii string
                                 ;	b3,b2	address of output routine (UART, LCD putc)
                                 _putstr:
000038 910d                      	ld	w,x+
000039 2300                      	tst	w
00003a f409                      	brne	PC+2
00003b cfd4                      	rjmp	_printf_read
00003c dfed                      	rcall	_putw
00003d cffa                      	rjmp	_putstr
                                 
                                 ; === putnum (dec/bin/hex/frac) ===========================
                                 ; in	x	pointer to SRAM variable to print
                                 ; 	r0	formatting character
                                 	
                                 _putnum:
00003e 935f
00003f 934f
000040 933f
000041 932f                      	PUSH4	a3,a2,a1,a0	; safeguard a
000042 939f
000043 938f
000044 937f
000045 936f                      	PUSH4	b3,b2,b1,b0	; safeguard b	
000046 912d
000047 913d
000048 914d
000049 915d                      	LDX4	a3,a2,a1,a0	; load operand to print into a
                                 
                                 ; FDEC	11bb'iiis
                                 ; FBIN	101i'iiis
                                 ; FHEX	1001'iiis
                                 ; FRACT	1000'1bbs
                                 
00004a fd06
00004b c006                      	JB1	w,6,_putdec
00004c fd05
00004d c00f                      	JB1	w,5,_putbin
00004e fd04
00004f c010                      	JB1	w,4,_puthex
000050 fd03
000051 c019                      	JB1	w,3,_putfrac
                                 
                                 ; FDEC	11bb'iiis
                                 _putdec:
000052 e06a                      	ldi	b0,10		; b0 = base (10)
                                 
000053 2f70                      	mov	b1,w
000054 9576                      	lsr	b1
000055 7077                      	andi	b1,0b111	
000056 9572                      	swap	b1		; b1 = format 0iii'0000 (integer digits)
000057 e080                      	ldi	b2,0		; b2 = dec. point position = 0 (right)
                                 	
000058 2f90                      	mov	b3,w
000059 9592                      	swap	b3
00005a 7093                      	andi	b3,0b11
00005b 9593                      	inc	b3			; b3 = number of bytes (1..4)
00005c c01a                      	rjmp	_getnum	; get number of digits (iii)
                                 
                                 ; FBIN	101i'iiis	addr
                                 _putbin:	
00005d e062                      	ldi	b0,2		; b0 = base (2)
00005e e094                      	ldi	b3,4		; b3 = number of bytes (4)	
00005f c003                      	rjmp	_getdig	; get number of digits (iii)
                                 
                                 ; FHEX	1001'iiis	addr
                                 _puthex:	
000060 e160                      	ldi	b0,16		; b0 = base (16)
000061 e094                      	ldi	b3,4		; b3 = number of bytes (4)
000062 c000                      	rjmp	_getdig
                                 
                                 _getdig:
000063 2f70                      	mov	b1,w
000064 9576                      	lsr	b1
000065 7077                      	andi	b1,0b111
000066 f409                      	brne	PC+2
000067 e078                      	ldi	b1,8		; if b1=0 then 8-digits
000068 9572                      	swap	b1		; b1 = format 0iii'0000 (integer digits)
000069 e080                      	ldi	b2, 0		; b2 = dec. point position = 0 (right)
00006a c00c                      	rjmp	_getnum
                                 
                                 ; FFRAC	1000'1bbs	addr	 00dd'dddd, 	iiii'ffff
                                 	
                                 _putfrac:
00006b e06a                      	ldi	b0,10		; base=10	
00006c 95c8                      	lpm
00006d 2d80                      	mov	b2,r0		; load dec.point position
00006e 9631                      	adiw	zl,1	; increment char pointer
00006f 95c8                      	lpm
000070 2d70                      	mov	b1,r0		; load ii.ff format
000071 9631                      	adiw	zl,1	; increment char pointer
                                 	
000072 2f90                      	mov	b3,w
000073 9595                      	asr	b3
000074 7093                      	andi	b3,0b11
000075 9593                      	inc	b3			; b3 = number of bytes (1..4)
                                 
000076 c000                      	rjmp	_getnum
                                 
                                 _getnum:
                                 ; in 	a	4-byte variable
                                 ; 	b3	number of bytes (1..4)
                                 ;	T	sign, 0=unsigned, 1=signed
                                 
000077 3094
000078 f081                      	JK	b3,4,_printf_4b
000079 3093
00007a f051                      	JK	b3,3,_printf_3b
00007b 3092
00007c f021                      	JK	b3,2,_printf_2b	
                                 	
                                 _printf_1b:			; sign extension
00007d 2733                      	clr	a1
00007e f416                      	brtc	PC+3	; T=1 sign extension
00007f fd27                      	sbrc	a0,7
000080 ef3f                      	ldi	a1,0xff
                                 _printf_2b:
000081 2744                      	clr	a2
000082 f416                      	brtc	PC+3	; T=1 sign extension	
000083 fd37                      	sbrc	a1,7
000084 ef4f                      	ldi	a2,0xff
                                 _printf_3b:	
000085 2755                      	clr	a3
000086 f416                      	brtc	PC+3	; T=1 sign extension
000087 fd47                      	sbrc	a2,7
000088 ef5f                      	ldi	a3,0xff
                                 _printf_4b:
                                 
000089 d009                      	rcall	_ftoa		; float to ascii
00008a 916f
00008b 917f
00008c 918f
00008d 919f                      	POP4	b3,b2,b1,b0	; restore b
00008e 912f
00008f 913f
000090 914f
000091 915f                      	POP4	a3,a2,a1,a0	; restore a
                                 	
000092 cf7d                      	rjmp	_printf_read
                                 
                                 ; ===============================================
                                 ; func	ftoa
                                 ; converts a fixed-point fractional number to an ascii string
                                 ; author (c) Raphael Holzer
                                 ;
                                 ; in	a3-a0	variable to print
                                 ;	b0	base, 2 to 36, but usually decimal (10)
                                 ;	b1	number of digits to print ii.ff
                                 ; 	b2	position of the decimal point (0=right, 32=left)
                                 ;	T	sign (T=0 unsiged, T=1 signed)
                                 
                                 _ftoa:
000093 92cf                      	push	d0
000094 92bf
000095 92af
000096 929f
000097 928f                      	PUSH4	c3,c2,c1,c0	; c = fraction part, a = integer part
000098 18bb
000099 24aa
00009a 2499
00009b 2488                      	CLR4	c3,c2,c1,c0	; clear fraction part
                                 
00009c f486                      	brtc	_ftoa_plus	; if T=0 then unsigned
00009d 94e8                      	clt
00009e 2355                      	tst	a3				; if MSb(a)=1 then a=-a
00009f f46a                      	brpl	_ftoa_plus
0000a0 9468                      	set					; T=1 (minus)
0000a1 2377                      	tst	b1
0000a2 f009                      	breq	PC+2		; if b1=0 the print ALL digits
0000a3 5170                      	subi	b1,0x10		; decrease int digits
0000a4 9550
0000a5 9540
0000a6 9530
0000a7 9520
0000a8 ef0f
0000a9 1b20
0000aa 0b30
0000ab 0b40
0000ac 0b50                      	NEG4	a3,a2,a1,a0	; negate a
                                 _ftoa_plus:	
0000ad 2388                      	tst	b2				; b0=0 (only integer part)
0000ae f051                      	breq	_ftoa_int	
                                 _ftoa_shift:	
0000af 9555
0000b0 9547
0000b1 9537
0000b2 9527                      	ASR4	a3,a2,a1,a0	; a = integer part	
0000b3 94b7
0000b4 94a7
0000b5 9497
0000b6 9487                      	ROR4	c3,c2,c1,c0	; c = fraction part
0000b7 958a
0000b8 f7b1                      	DJNZ	b2,_ftoa_shift
                                 _ftoa_int:
0000b9 937f                      	push	b1			; ii.ff (ii=int digits)
0000ba 9572                      	swap	b1
0000bb 707f                      	andi	b1,0x0f
                                 	
0000bc e20e                      	ldi	w,'.'			; push decimal point
0000bd 930f                      	push	w
                                 _ftoa_int1:
0000be d045                      	rcall	_div41		; int=int/10
0000bf 2d0c                      	mov	w,d0			; d=reminder
0000c0 d030                      	rcall	_hex2asc
0000c1 930f                      	push	w			; push rem(int/10)
0000c2 2700
0000c3 1720
0000c4 0730
0000c5 0740
0000c6 0750                      	TST4	a3,a2,a1,a0	; (int/10)=?
0000c7 f029                      	breq	_ftoa_space	; (int/10)=0 then finished
0000c8 2377                      	tst	b1
0000c9 f3a1                      	breq	_ftoa_int1	; if b1=0 then print ALL int-digits
0000ca 957a
0000cb f791                      	DJNZ	b1,_ftoa_int1
0000cc c007                      	rjmp	_ftoa_sign
                                 _ftoa_space:
0000cd 2377                      	tst	b1				; if b1=0 then print ALL int-digits
0000ce f029                      	breq	_ftoa_sign
0000cf 957a                      	dec	b1
0000d0 f019                      	breq	_ftoa_sign
0000d1 e200                      	ldi	w,' '			; write spaces
0000d2 df57                      	rcall	_putw	
0000d3 cff9                      	rjmp	_ftoa_space
                                 _ftoa_sign:
0000d4 f416                      	brtc	PC+3		; if T=1 then write 'minus'
0000d5 e20d                      	ldi	w,'-'
0000d6 df53                      	rcall	_putw
                                 _ftoa_int3:
0000d7 910f                      	pop	w
0000d8 320e                      	cpi	w,'.'
0000d9 f011                      	breq	PC+3
0000da df4f                      	rcall	_putw
0000db cffb                      	rjmp	_ftoa_int3
                                 
0000dc 917f                      	pop	b1				; ii.ff (ff=frac digits)
0000dd 707f                      	andi	b1,0x0f
0000de 2377                      	tst	b1
0000df f059                      	breq	_ftoa_end
                                 _ftoa_point:	
0000e0 df49                      	rcall	_putw		; write decimal point
0000e1 2d28
0000e2 2d39
0000e3 2d4a
0000e4 2d5b                      	MOV4	a3,a2,a1,a0, c3,c2,c1,c0		
                                 _ftoa_frac:
0000e5 d011                      	rcall	_mul41		; d.frac=10*frac
0000e6 2d0c                      	mov	w,d0
0000e7 d009                      	rcall	_hex2asc
0000e8 df41                      	rcall	_putw
0000e9 957a
0000ea f7d1                      	DJNZ	b1,_ftoa_frac
                                 _ftoa_end:
0000eb 908f
0000ec 909f
0000ed 90af
0000ee 90bf                      	POP4	c3,c2,c1,c0
0000ef 90cf                      	pop	d0
0000f0 9508                      	ret
                                 
                                 ; === hexadecimal to ascii ===
                                 ; in	w
                                 _hex2asc:
0000f1 300a                      	cpi	w,10
0000f2 f410                      	brsh	PC+3
0000f3 5d00                      	addi	w,'0'
0000f4 9508                      	ret
0000f5 5a09                      	addi	w,('a'-10)
0000f6 9508                      	ret
                                 
                                 ; === multiply 4byte*1byte ===
                                 ; funct mul41
                                 ; multiplies a3-a0 (4-byte) by b0 (1-byte)
                                 ; author (c) Raphael Holzer, EPFL
                                 ; 
                                 ; in	a3..a0	multiplicand (argument to multiply)
                                 ;	b0	multiplier
                                 ; out	a3..a0	result
                                 ; 	d0	result MSB (byte 4)
                                 ;
0000f7 24cc                      _mul41:	clr	d0			; clear byte4 of result
0000f8 e200                      	ldi	w,32			; load bit counter
0000f9 9488                      __m41:	clc				; clear carry
0000fa fd20                      	sbrc	a0,0		; skip addition if LSB=0
0000fb 0ec6                      	add	d0,b0			; add b to MSB of a
0000fc 94c7
0000fd 9557
0000fe 9547
0000ff 9537
000100 9527                      	ROR5	d0,a3,a2,a1,a0	; shift-right c, LSB (of b) into carry
000101 950a
000102 f7b1                      	DJNZ	w,__m41		; Decrement and Jump if bit-count Not Zero
000103 9508                      	ret
                                 
                                 ; === divide 4byte/1byte ===
                                 ; func div41
                                 ; in	a0..a3 	divident (argument to divide)
                                 ;	b0 	divider
                                 ; out	a0..a3 	result 
                                 ;	d0	reminder
                                 ;
000104 24cc                      _div41:	clr	d0			; d will contain the remainder
000105 e200                      	ldi	w,32			; load bit counter
000106 1f22
000107 1f33
000108 1f44
000109 1f55
00010a 1ccc                      __d41:	ROL5	d0,a3,a2,a1,a0	; shift carry into result c
00010b 1ac6                      	sub	d0, b0			; subtract b from remainder
00010c f408                      	brcc	PC+2	
00010d 0ec6                      	add	d0, b0			; restore if remainder became negative
00010e 950a
00010f f7b1                      	DJNZ	w,__d41		; Decrement and Jump if bit-count Not Zero
000110 1f22
000111 1f33
000112 1f44
000113 1f55                      	ROL4	a3,a2,a1,a0	; last shift (carry into result c)
000114 9550
000115 9540
000116 9530
000117 9520                      	COM4	a3,a2,a1,a0	; complement result
000118 9508                      	ret
                                 .include "string.asm"
                                 
                                 ; AssemblerApplication1.asm
                                 ;
                                 ; Created: 30/04/2024 10:34:37
                                 ; Author : renuka
                                 ; File containing all strings to 
                                 ; print on LCD screen
                                 
                                 
                                 .cseg
                                 
                                 ; Menu of game
                                 str0:
000119 4557
00011a 434c
00011b 4d4f
00011c 2045
00011d 4f54
00011e 0020                      .db "WELCOME TO ", 0
                                 str1:
00011f 434d
000120 2055
000121 4150
000122 5452
000123 0059                      .db "MCU PARTY", 0
                                 str2:
000124 2e31
000125 5020
000126 414c
000127 2059
000128 4147
000129 454d
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(18): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
00012a 0000                      .db "1. PLAY GAME", 0
                                 str3:
00012b 2e32
00012c 4f20
00012d 4550
00012e 204e
00012f 4153
000130 4546
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(20): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000131 0000                      .db "2. OPEN SAFE", 0
                                 
                                 ; general
                                 strwelcome:
000132 6557
000133 636c
000134 6d6f
000135 2065
000136 6f74
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(24): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000137 0000                      .db "Welcome to",0
                                 
                                 strivia:
000138 7274
000139 7669
00013a 6169
00013b 3a20
00013c 0029                      .db "trivia :)",0
                                 
                                 strbutton:
00013d 6874
00013e 2065
00013f 7562
000140 7474
000141 6e6f
000142 3a20
000143 0029                      .db "the button :)",0
                                 
                                 strcorrect:
000144 6f43
000145 7272
000146 6365
000147 2174
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(33): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000148 0000                      .db "Correct!",0
                                 
                                 strfalse:
000149 6146
00014a 736c
00014b 2165
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(36): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
00014c 0000                      .db "False!",0
                                 
                                 strivia2:
00014d 6e41
00014e 7773
00014f 7265
000150 3520
000151 312f
000152 2030
000153 6f63
000154 002d                      .db "Answer 5/10 co-",0
                                 
                                 strivia3:
000155 7272
000156 6365
000157 6c74
000158 2079
000159 6f74
00015a 7720
00015b 6e69
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(42): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
00015c 0000                      .db "rrectly to win",0
                                 
                                 strclue1a:
00015d 7331
00015e 2074
00015f 6c63
000160 6575
000161 003a                      .db "1st clue:",0
                                 
                                 strclue1b:
000162 4e53
000163 574f
000164 5720
000165 4948
000166 4554
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(48): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000167 0000                      .db "SNOW WHITE",0
                                 
                                 strwin1:
000168 4f43
000169 474e
00016a 4152
00016b 5554
00016c 414c
00016d 4954
00016e 4e4f
00016f 0053                      .db "CONGRATULATIONS",0
                                 
                                 strwin2:
000170 4f59
000171 2055
000172 4957
000173 004e                      .db "YOU WIN",0
                                 
                                 strlose1:
000174 4f59
000175 2055
000176 4f4c
000177 4553
000178 002c                      .db "YOU LOSE,",0
                                 
                                 strlose2:
000179 5254
00017a 2059
00017b 4741
00017c 4941
00017d 004e                      .db "TRY AGAIN",0
                                 
                                 ; Choose games
                                 str4:
00017e 2e31
00017f 5420
000180 4952
000181 4956
000182 2041
000183 5551
000184 5a49
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(64): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000185 0000                      .db "1. TRIVIA QUIZ", 0
                                 str5:
000186 2e32
000187 4220
000188 5455
000189 4f54
00018a 204e
00018b 4144
00018c 434e
00018d 0045                      .db "2. BUTTON DANCE", 0
                                 
                                 ; Open safe
                                 str6:
00018e 4e45
00018f 4554
000190 2052
000191 4150
000192 5353
000193 4f43
000194 4544
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(70): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000195 0000                      .db "ENTER PASSCODE", 0
                                 str7:
000196 4e49
000197 4f43
000198 5252
000199 4345
00019a 2054
00019b 4150
00019c 5353
00019d 4f43
00019e 4544
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(72): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
00019f 0000                      .db "INCORRECT PASSCODE", 0
                                 str8:
0001a0 4f43
0001a1 474e
0001a2 4152
0001a3 5554
0001a4 414c
0001a5 4954
0001a6 4e4f
0001a7 2c53
0001a8 0020                      .db "CONGRATULATIONS, ", 0
                                 str9:
0001a9 4f59
0001aa 2055
0001ab 4957
0001ac 204e
0001ad 4854
0001ae 5349
0001af 4720
0001b0 4d41
0001b1 2045
0001b2 0021                      .db "YOU WIN THIS GAME !", 0
                                 str10:
0001b3 4854
0001b4 4e41
0001b5 534b
0001b6 4620
0001b7 524f
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(78): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
0001b8 0000                      .db "THANKS FOR", 0
                                 str11:
0001b9 4c50
0001ba 5941
0001bb 4e49
0001bc 2147
0001bd 3a20
0001be 0044                      .db "PLAYING! :D", 0
                                 
                                 ; Quiz trivia
                                 ; Question 1
                                 striviaQ1:
0001bf 6857
0001c0 206f
0001c1 7277
0001c2 746f
0001c3 2065
0001c4 6874
0001c5 0065                      .db "Who wrote the", 0
                                 striviaQ12:
0001c6 6f73
0001c7 676e
0001c8 2720
0001c9 6874
0001ca 6972
0001cb 6c6c
0001cc 7265
0001cd 3f27
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(87): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
0001ce 0000                      .db "song 'thriller'?", 0
                                 strivia1A:
0001cf 2e41
0001d0 5020
0001d1 414c
0001d2 4259
0001d3 494f
0001d4 4320
0001d5 5241
0001d6 4954
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(89): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
0001d7 0000                      .db "A. PLAYBOI CARTI", 0
                                 strivia1B:
0001d8 2e42
0001d9 5420
0001da 4152
0001db 5943
0001dc 4320
0001dd 4148
0001de 4d50
0001df 4e41
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(91): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
0001e0 0000                      .db "B. TRACY CHAPMAN", 0
                                 strivia1C:
0001e1 2e43
0001e2 4120
0001e3 202e
0001e4 4353
0001e5 4d48
0001e6 4449
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(93): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
0001e7 0000                      .db "C. A. SCHMID", 0
                                 strivia1D:
0001e8 2e44
0001e9 4d20
0001ea 202e
0001eb 414a
0001ec 4b43
0001ed 4f53
0001ee 004e                      .db "D. M. JACKSON", 0
                                 answer1:
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(97): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
0001ef 00ef                      .db 0xef
                                 
                                 ; Question 2
                                 striviaQ2:
0001f0 6857
0001f1 206f
0001f2 6c70
0001f3 7961
0001f4 0073                      .db "Who plays", 0
                                 striviaQ22:
0001f5 6548
0001f6 6d72
0001f7 6f69
0001f8 656e
0001f9 003f                      .db "Hermione?", 0
                                 strivia2A:
0001fa 2e41
0001fb 4520
0001fc 4d4d
0001fd 2041
0001fe 4157
0001ff 5354
000200 4e4f
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(105): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000201 0000                      .db "A. EMMA WATSON", 0
                                 strivia2B:
000202 2e42
000203 4520
000204 4d4d
000205 2041
000206 5453
000207 4e4f
000208 0045                      .db "B. EMMA STONE", 0
                                 strivia2C:
000209 2e43
00020a 5020
00020b 414c
00020c 4259
00020d 494f
00020e 4320
00020f 5241
000210 4954
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(109): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000211 0000                      .db "C. PLAYBOI CARTI", 0
                                 strivia2D:
000212 2e44
000213 5a20
000214 454f
000215 5320
000216 4c41
000217 4144
000218 414e
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(111): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000219 0000                      .db "D. ZOE SALDANA", 0
                                 answer2:
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(113): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
00021a 00fd                      .db 0xfd
                                 
                                 ; Question 3
                                 striviaQ3:
00021b 6857
00021c 6369
00021d 2068
00021e 6162
00021f 646e
000220 7720
000221 6f72
000222 6574
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(117): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000223 0000                      .db "Which band wrote", 0
                                 striviaQ32:
000224 6827
000225 7965
000226 7920
000227 756f
000228 2027
000229 003f                      .db "'hey you' ?", 0
                                 strivia3A:
00022a 2e41
00022b 5020
00022c 414c
00022d 4259
00022e 494f
00022f 4320
000230 5241
000231 4954
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(121): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000232 0000                      .db "A. PLAYBOI CARTI", 0
                                 strivia3B:
000233 2e42
000234 4c20
000235 4445
000236 5a20
000237 5045
000238 4c50
000239 4e49
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(123): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
00023a 0000                      .db "B. LED ZEPPLIN", 0
                                 strivia3C:
00023b 2e43
00023c 4a20
00023d 554f
00023e 4e52
00023f 5945
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(125): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000240 0000                      .db "C. JOURNEY", 0
                                 strivia3D:
000241 2e44
000242 5020
000243 4e49
000244 204b
000245 4c46
000246 594f
000247 0044                      .db "D. PINK FLOYD", 0
                                 answer3:
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(129): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000248 00ef                      .db 0xef
                                 
                                 ; Question 4
                                 striviaQ4:
000249 6857
00024a 206f
00024b 7277
00024c 746f
00024d 2065
00024e 4127
00024f 7269
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(133): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000250 0000                      .db "Who wrote 'Air", 0
                                 striviaQ42:
000251 6e6f
000252 4720
000253 7320
000254 7274
000255 6e69
000256 2767
000257 003f                      .db "on G string'?", 0
                                 strivia4A:
000258 2e41
000259 5020
00025a 414c
00025b 4259
00025c 494f
00025d 4320
00025e 5241
00025f 4954
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(137): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000260 0000                      .db "A. PLAYBOI CARTI", 0
                                 strivia4B:
000261 2e42
000262 4220
000263 4545
000264 4854
000265 564f
000266 4e45
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(139): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000267 0000                      .db "B. BEETHOVEN", 0
                                 strivia4C:
000268 2e43
000269 5320
00026a 4843
00026b 4255
00026c 5245
00026d 0054                      .db "C. SCHUBERT", 0
                                 strivia4D:
00026e 2e44
00026f 4a20
000270 532e
000271 202e
000272 4142
000273 4843
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(143): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000274 0000                      .db "D. J.S. BACH", 0
                                 answer4:
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(145): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000275 00ef                      .db 0xef
                                 
                                 ; Question 5
                                 striviaQ5:
000276 6857
000277 206f
000278 6574
000279 6361
00027a 6568
00027b 0073                      .db "Who teaches", 0
                                 striviaQ52:
00027c 434d
00027d 2055
00027e 6562
00027f 7473
000280 003f                      .db "MCU best?", 0
                                 strivia5A:
000281 2e41
000282 5020
000283 414c
000284 4259
000285 494f
000286 4320
000287 5241
000288 4954
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(153): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000289 0000                      .db "A. PLAYBOI CARTI", 0
                                 strivia5B:
00028a 2e42
00028b 4120
00028c 202e
00028d 4353
00028e 4d48
00028f 4449
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(155): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000290 0000                      .db "B. A. SCHMID", 0
                                 strivia5C:
000291 2e43
000292 4d20
000293 202e
000294 4c41
000295 0049                      .db "C. M. ALI", 0
                                 strivia5D:
000296 2e44
000297 4320
000298 2052
000299 0037                      .db "D. CR 7", 0
                                 answer5:
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(161): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
00029a 00fb                      .db 0xfb
                                 
                                 ; Question 6
                                 striviaQ6:
00029b 6857
00029c 206f
00029d 6f77
00029e 206e
00029f 6874
0002a0 2065
0002a1 3032
0002a2 3232
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(165): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
0002a3 0000                      .db "Who won the 2022", 0
                                 striviaQ62:
0002a4 4946
0002a5 4146
0002a6 5720
0002a7 726f
0002a8 646c
0002a9 4320
0002aa 7075
0002ab 003f                      .db "FIFA World Cup?", 0
                                 strivia6A:
0002ac 2e41
0002ad 5020
0002ae 414c
0002af 4259
0002b0 494f
0002b1 4320
0002b2 5241
0002b3 4954
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(169): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
0002b4 0000                      .db "A. PLAYBOI CARTI", 0
                                 strivia6B:
0002b5 2e42
0002b6 5320
0002b7 4957
0002b8 5a54
0002b9 5245
0002ba 414c
0002bb 444e
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(171): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
0002bc 0000                      .db "B. SWITZERLAND", 0
                                 strivia6C:
0002bd 2e43
0002be 4120
0002bf 4752
0002c0 4e45
0002c1 4954
0002c2 414e
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(173): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
0002c3 0000                      .db "C. ARGENTINA", 0
                                 strivia6D:
0002c4 2e44
0002c5 4620
0002c6 4152
0002c7 434e
0002c8 0045                      .db "D. FRANCE", 0
                                 answer6:
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(177): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
0002c9 00f7                      .db 0xf7
                                 
                                 ; Question 7
                                 striviaQ7:
0002ca 6857
0002cb 6369
0002cc 2068
0002cd 6964
0002ce 6873
0002cf 6920
0002d0 0073                      .db "Which dish is", 0
                                 striviaQ72:
0002d1 6f6e
0002d2 2074
0002d3 7773
0002d4 7369
0002d5 3f73
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(183): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
0002d6 0000                      .db "not swiss?", 0
                                 strivia7A:
0002d7 2e41
0002d8 5020
0002d9 414c
0002da 4259
0002db 494f
0002dc 4320
0002dd 5241
0002de 4954
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(185): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
0002df 0000                      .db "A. PLAYBOI CARTI", 0
                                 strivia7B:
0002e0 2e42
0002e1 5220
0002e2 4341
0002e3 454c
0002e4 5454
0002e5 0045                      .db "B. RACLETTE", 0
                                 strivia7C:
0002e6 2e43
0002e7 4620
0002e8 4e4f
0002e9 5544
0002ea 0045                      .db "C. FONDUE", 0
                                 strivia7D:
0002eb 2e44
0002ec 5220
0002ed 454f
0002ee 5453
0002ef 0049                      .db "D. ROESTI", 0
                                 answer7:
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(193): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
0002f0 00fd                      .db 0xfd
                                 
                                 ; Question 8
                                 striviaQ8:
0002f1 6857
0002f2 7461
0002f3 7327
0002f4 7420
0002f5 6568
0002f6 6320
0002f7 7061
0002f8 2d69
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(197): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
0002f9 0000                      .db "What's the capi-", 0
                                 striviaQ82:
0002fa 6174
0002fb 206c
0002fc 666f
0002fd 4c20
0002fe 6f61
0002ff 3f73
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(199): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000300 0000                      .db "tal of Laos?", 0
                                 strivia8A:
000301 2e41
000302 4c20
000303 4f41
000304 0053                      .db "A. LAOS", 0
                                 strivia8B:
000305 2e42
000306 5620
000307 4549
000308 544e
000309 4149
00030a 454e
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(203): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
00030b 0000                      .db "B. VIENTIANE", 0
                                 strivia8C:
00030c 2e43
00030d 5620
00030e 4e45
00030f 4349
000310 0045                      .db "C. VENICE", 0
                                 strivia8D:
000311 2e44
000312 5020
000313 414c
000314 4259
000315 494f
000316 4320
000317 5241
000318 4954
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(207): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000319 0000                      .db "D. PLAYBOI CARTI", 0
                                 answer8:
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(209): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
00031a 00fb                      .db 0xfb
                                 
                                 ; Question 9
                                 striviaQ9:
00031b 6857
00031c 7461
00031d 7327
00031e 7420
00031f 6568
000320 6220
000321 7365
000322 0074                      .db "What's the best", 0
                                 striviaQ92:
000323 6573
000324 7463
000325 6f69
000326 206e
000327 7461
000328 4520
000329 4650
00032a 3f4c
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(215): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
00032b 0000                      .db "section at EPFL?", 0
                                 strivia9A:
00032c 2e41
00032d 4c20
00032e 4649
00032f 2045
000330 4353
000331 4549
000332 434e
000333 5345
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(217): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000334 0000                      .db "A. LIFE SCIENCES", 0
                                 strivia9B:
000335 2e42
000336 4d20
000337 4349
000338 4f52
000339 4554
00033a 4843
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(219): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
00033b 0000                      .db "B. MICROTECH", 0
                                 strivia9C:
00033c 2e43
00033d 4520
00033e 454c
00033f 0043                      .db "C. ELEC", 0
                                 strivia9D:
000340 2e44
000341 5020
000342 414c
000343 4259
000344 494f
000345 4320
000346 5241
000347 4954
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(223): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000348 0000                      .db "D. PLAYBOI CARTI", 0
                                 answer9:
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(225): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000349 00f7                      .db 0xf7
                                 
                                 ; Question 10
                                 striviaQ10:
00034a 6857
00034b 206f
00034c 7277
00034d 746f
00034e 2065
00034f 6874
000350 0065                      .db "Who wrote the", 0
                                 striviaQ102:
000351 6f73
000352 676e
000353 2720
000354 6b73
000355 2779
000356 003f                      .db "song 'sky'?", 0
                                 strivia10A:
000357 2e41
000358 4b20
000359 4e41
00035a 4559
00035b 5720
00035c 5345
00035d 0054                      .db "A. KANYE WEST", 0
                                 strivia10B:
00035e 2e42
00035f 5020
000360 414c
000361 4259
000362 494f
000363 4320
000364 5241
000365 4954
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(235): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
000366 0000                      .db "B. PLAYBOI CARTI", 0
                                 strivia10C:
000367 2e43
000368 4120
000369 202e
00036a 4353
00036b 4d48
00036c 4449
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm(237): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(24): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\string.asm' included form here
00036d 0000                      .db "C. A. SCHMID", 0
                                 strivia10D:
00036e 2e44
00036f 5420
000370 5941
000371 4f4c
000372 2052
000373 5753
000374 4649
000375 0054                      .db "D. TAYLOR SWIFT", 0
                                 answer10:
                                 .include "lcd.asm"
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\lcd.asm(1): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(25): 'C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\lcd.asm' included form here
000376 00fb                      
                                 ; purpose  LCD HD44780U library
                                 ; ATmega 128 and Atmel Studio 7.0 compliant
                                 
                                 ; === definitions ===
                                 .equ	LCD_IR	= 0x8000	; address LCD instruction reg
                                 .equ	LCD_DR	= 0xc000	; address LCD data register
                                 
                                 ; === subroutines ===
                                 LCD_wr_ir:
                                 ; in	w (byte to write to LCD IR)
000377 9030 8000                 	lds	u, LCD_IR		; read IR to check busy flag  (bit7)
000379 fc37
00037a cffc                      	JB1	u,7,LCD_wr_ir	; Jump if Bit=1 (still busy)
00037b d003                      	rcall	lcd_4us		; delay to increment DRAM addr counter
00037c 9300 8000                 	sts	LCD_IR, w		; store w in IR
00037e 9508                      	ret
                                 	
                                 lcd_4us:
00037f d000                      	rcall	lcd_2us		; recursive call		
                                 lcd_2us:
000380 0000                      	nop					; rcall(3) + nop(1) + ret(4) = 8 cycles (2us)
000381 9508                      	ret
                                 
                                 LCD:
                                 LCD_putc:
000382 302d
000383 f179                      	JK	a0,CR,LCD_cr	; Jump if a0=CR
000384 302a
000385 f1b9                      	JK	a0,LF,LCD_lf	; Jump if a0=LF
                                 LCD_wr_dr:
                                 ; in	a0 (byte to write to LCD DR)
000386 9100 8000                 	lds	w, LCD_IR		; read IR to check busy flag  (bit7)
000388 fd07
000389 cffc                      	JB1	w,7,LCD_wr_dr	; Jump if Bit=1 (still busy)
00038a dff4                      	rcall	lcd_4us		; delay to increment DRAM addr counter
00038b 9320 c000                 	sts	LCD_DR, a0		; store a0 in DR
00038d 9508                      	ret	
                                 	
00038e e001
00038f cfe7                      LCD_clear:		JW	LCD_wr_ir, 0b00000001		; clear display
000390 e002
000391 cfe5                      LCD_home:		JW	LCD_wr_ir, 0b00000010		; return home
000392 e100
000393 cfe3                      LCD_cursor_left:	JW	LCD_wr_ir, 0b00010000	; move cursor to left
000394 e104
000395 cfe1                      LCD_cursor_right:	JW	LCD_wr_ir, 0b00010100	; move cursor to right
000396 e108
000397 cfdf                      LCD_display_left:	JW	LCD_wr_ir, 0b00011000	; shifts display to left
000398 e10c
000399 cfdd                      LCD_display_right:	JW	LCD_wr_ir, 0b00011100	; shifts display to right
00039a e00d
00039b cfdb                      LCD_blink_on:		JW	LCD_wr_ir, 0b00001101	; Display=1,Cursor=0,Blink=1
00039c e00c
00039d cfd9                      LCD_blink_off:		JW	LCD_wr_ir, 0b00001100	; Display=1,Cursor=0,Blink=0
00039e e00e
00039f cfd7                      LCD_cursor_on:		JW	LCD_wr_ir, 0b00001110	; Display=1,Cursor=1,Blink=0
0003a0 e00c
0003a1 cfd5                      LCD_cursor_off:		JW	LCD_wr_ir, 0b00001100	; Display=1,Cursor=0,Blink=0
0003a2 e00f
0003a3 cfd3                      LCD_cursorblink: 	JW	LCD_wr_ir, 0b00001111	; Display=1,Cursor=1,Blink=1	
                                 LCD_init:
0003a4 b705                      	in	w,MCUCR					; enable access to ext. SRAM
0003a5 6c00                      	sbr	w,(1<<SRE)+(1<<SRW10)
0003a6 bf05                      	out	MCUCR,w
0003a7 e001
0003a8 dfce                      	CW	LCD_wr_ir, 0b00000001	; clear display
0003a9 e006
0003aa dfcc                      	CW	LCD_wr_ir, 0b00000110	; entry mode set (Inc=1, Shift=0)
0003ab e00c
0003ac dfca                      	CW	LCD_wr_ir, 0b00001100	; Display=1,Cursor=0,Blink=0	
0003ad e308
0003ae dfc8                      	CW	LCD_wr_ir, 0b00111000	; 8bits=1, 2lines=1, 5x8dots=0
0003af 9508                      	ret
                                 
                                 LCD_pos:
                                 ; in	a0 = position (0x00..0x0f first line, 0x40..0x4f second line)
0003b0 2f02                      	mov	w,a0
0003b1 6800                      	ori	w,0b10000000
0003b2 cfc4                      	rjmp	LCD_wr_ir
                                 
                                 LCD_cr:
                                 ; moving the cursor to the beginning of the line (carriage return)
0003b3 9100 8000                 	lds	w, LCD_IR			; read IR to check busy flag  (bit7)
0003b5 fd07
0003b6 cffc                      	JB1	w,7,LCD_cr			; Jump if Bit=1 (still busy)
0003b7 7400                      	andi	w,0b01000000	; keep bit6 (begin of line 1/2)
0003b8 6800                      	ori	w,0b10000000		; write address command
0003b9 dfc5                      	rcall	lcd_4us			; delay to increment DRAM addr counter
0003ba 9300 8000                 	sts	LCD_IR,w			; store in IR
0003bc 9508                      	ret
                                 
                                 LCD_lf:
                                 ; moving the cursor to the beginning of the line 2 (line feed)
0003bd 932f                      	push	a0				; safeguard a0
0003be e420                      	ldi	a0,$40				; load position $40 (begin of line 2)
0003bf dff0                      	rcall	LCD_pos			; set cursor position
0003c0 912f                      	pop	a0					; restore a0
                                 .include "display.asm"
0003c1 9508                      
                                  * display.asm
                                  *
                                  *  Created: 30/04/2024 11:39:40
                                  *   Author: renuka
                                  */ 
                                 
                                 .macro DISPLAY1 
                                 
                                 	call	LCD_init
                                 	ldi	zl, low(2*@0)
                                 	ldi	zh, high(2*@0)
                                 	call	LCD_putstring
                                 
                                 .endmacro
                                 
                                 .macro DISPLAY2
                                 
                                 	call	LCD_init
                                 	ldi	zl, low(2*@0)
                                 	ldi	zh, high(2*@0)
                                 	call	LCD_putstring
                                 	ldi	zl, low(2*@1)
                                 	ldi	zh, high(2*@1)
                                 	ldi	a0, 0x40
                                 	call	LCD_pos
                                 	call	LCD_putstring
                                 
                                 .endmacro
                                 .include "subroutines.asm"
                                 
                                  * subroutines.asm
                                  *
                                  *  Created: 30/04/2024 11:21:07
                                  *   Author: renuka
                                  */ 
                                 
                                 ; code from: tp05 puts02.asm
                                  LCD_putstring:
0003c2 95c8                      	lpm
0003c3 2000                      	tst		r0
0003c4 f021                      	breq	done
0003c5 2d20                      	mov		a0, r0
0003c6 dfbb                      	rcall	LCD_putc
0003c7 9631                      	adiw	zl, 1
0003c8 cff9                      	rjmp	LCD_putstring
0003c9 9508                      done:ret
                                 
                                 
                                 /*
                                 putdec:
                                 	mov u, a0
                                 	ldi a0, '0'-1
                                 	ldi w, 100
                                 _putdec2:
                                 	inc a0
                                 	sub u, w
                                 	brsh _putdec2
                                 	add u,w
                                 	rcall LCD_putc
                                 
                                 	ldi a0, '0'-1
                                 	ldi w, 10
                                 _putdec1:
                                 	inc a0
                                 	sub u, w
                                 	brsh _putdec1
                                 	add u, w
                                 	rcall LCD_putc
                                 	ldi a0, '0'
                                 	add a0, u
                                 	rcall LCD_putc
                                 	ldi a0, '0'
                                 	add a0, u
                                 	rcall LCD_putc
                                 	ret
                                 */
                                 
                                 
                                 main:
0003ca dfc3                      	rcall	LCD_clear
0003cb 940e 03a4
0003cd e3e2
0003ce e0f2
0003cf 940e 03c2
0003d1 e3ee
0003d2 e0f2
0003d3 e420
0003d4 940e 03b0
0003d6 940e 03c2                 	DISPLAY2 str0, str1
0003d8 ed00
0003d9 2e30
0003da e008
0003db 930f
0003dc 923f
0003dd e300
0003de 2e30
0003df e006
0003e0 943a
0003e1 f7f1
0003e2 943a
0003e3 950a
0003e4 f7d9
0003e5 903f
0003e6 910f
0003e7 943a
0003e8 f791
0003e9 950a
0003ea f781                      	WAIT_MS 2000
                                 
                                 main_loop:
0003eb d00e                      	rcall start
0003ec ff62
0003ed 940e 0d71                 	CB0 b0,2, safe ; call subroutine safe if PD1 pressed
0003ef ff61
0003f0 940e 0412                 	CB0 b0,1, games ; call subroutine games if PD0 pressed
0003f2 ff61
0003f3 940e 043d                 	CB0 b0,1, trivia
0003f5 ff62
0003f6 940e 0d4d                 	CB0 b0,2, dance
0003f8 940c 03eb                 	jmp main_loop
                                 
                                 start:
0003fa 940e 03a4
0003fc e4e8
0003fd e0f2
0003fe 940e 03c2
000400 e5e6
000401 e0f2
000402 e420
000403 940e 03b0
000405 940e 03c2                 	DISPLAY2 str2, str3
000407 940e 0d89                 	call check_button
000409 b360                      	in b0, PIND ; b0=r22
00040a bb68                      	out PORTB, b0
00040b 3f6d                      	cpi b0, 0xfd
00040c f011                      	breq PC+3
00040d 3f6b                      	cpi b0, 0xfb
00040e f409                      	brne PC+2
00040f 9508                      	ret
000410 940c 03fa                 	jmp start
                                 
                                 games:
000412 940e 03a4
000414 efec
000415 e0f2
000416 940e 03c2
000418 e0ec
000419 e0f3
00041a e420
00041b 940e 03b0
00041d 940e 03c2                 	DISPLAY2 str4, str5
00041f 940e 0d89                 	call check_button
000421 ee08
000422 2e30
000423 e004
000424 930f
000425 923f
000426 e300
000427 2e30
000428 e006
000429 943a
00042a f7f1
00042b 943a
00042c 950a
00042d f7d9
00042e 903f
00042f 910f
000430 943a
000431 f791
000432 950a
000433 f781                      	WAIT_MS 1000
000434 b360                      	in b0, PIND
000435 bb68                      	out PORTB, b0
000436 3f6d                      	cpi b0, 0xfd
000437 f011                      	breq PC+3
000438 3f6b                      	cpi b0, 0xfb
000439 f409                      	brne PC+2
00043a 9508                      	ret
00043b 940c 0412                 	jmp games
                                 
                                 trivia:
00043d 940e 03a4
00043f e6e4
000440 e0f2
000441 940e 03c2
000443 e7e0
000444 e0f2
000445 e420
000446 940e 03b0
000448 940e 03c2                 	DISPLAY2 strwelcome, strivia
                                 	;rcall check_button
00044a ed00
00044b 2e30
00044c e008
00044d 930f
00044e 923f
00044f e300
000450 2e30
000451 e006
000452 943a
000453 f7f1
000454 943a
000455 950a
000456 f7d9
000457 903f
000458 910f
000459 943a
00045a f791
00045b 950a
00045c f781                      	WAIT_MS 2000
00045d 940e 03a4
00045f e9ea
000460 e0f2
000461 940e 03c2
000463 eaea
000464 e0f2
000465 e420
000466 940e 03b0
000468 940e 03c2                 	DISPLAY2 strivia2, strivia3
00046a ed00
00046b 2e30
00046c e008
00046d 930f
00046e 923f
00046f e300
000470 2e30
000471 e006
000472 943a
000473 f7f1
000474 943a
000475 950a
000476 f7d9
000477 903f
000478 910f
000479 943a
00047a f791
00047b 950a
00047c f781                      	WAIT_MS 2000
00047d e070                      	ldi b1, 0x00
00047e 940e 03a4
000480 e7ee
000481 e0f3
000482 940e 03c2
000484 e8ec
000485 e0f3
000486 e420
000487 940e 03b0
000489 940e 03c2
00048b ed00
00048c 2e30
00048d e008
00048e 930f
00048f 923f
000490 e300
000491 2e30
000492 e006
000493 943a
000494 f7f1
000495 943a
000496 950a
000497 f7d9
000498 903f
000499 910f
00049a 943a
00049b f791
00049c 950a
00049d f781
00049e b360
00049f bb68
0004a0 ff64
0004a1 940c 0517
0004a3 ff63
0004a4 940c 0517
0004a6 ff62
0004a7 940c 0517
0004a9 ff61
0004aa 940c 0517
0004ac 940e 03a4
0004ae e9ee
0004af e0f3
0004b0 940e 03c2
0004b2 ebe0
0004b3 e0f3
0004b4 e420
0004b5 940e 03b0
0004b7 940e 03c2
0004b9 b360
0004ba bb68
0004bb ff64
0004bc 940c 0517
0004be ff63
0004bf 940c 0517
0004c1 ff62
0004c2 940c 0517
0004c4 ff61
0004c5 940c 0517
0004c7 ed00
0004c8 2e30
0004c9 e008
0004ca 930f
0004cb 923f
0004cc e300
0004cd 2e30
0004ce e006
0004cf 943a
0004d0 f7f1
0004d1 943a
0004d2 950a
0004d3 f7d9
0004d4 903f
0004d5 910f
0004d6 943a
0004d7 f791
0004d8 950a
0004d9 f781
0004da b360
0004db bb68
0004dc ff64
0004dd 940c 0517
0004df ff63
0004e0 940c 0517
0004e2 ff62
0004e3 940c 0517
0004e5 ff61
0004e6 940c 0517
0004e8 940e 03a4
0004ea ece2
0004eb e0f3
0004ec 940e 03c2
0004ee ede0
0004ef e0f3
0004f0 e420
0004f1 940e 03b0
0004f3 940e 03c2
0004f5 ed00
0004f6 2e30
0004f7 e008
0004f8 930f
0004f9 923f
0004fa e300
0004fb 2e30
0004fc e006
0004fd 943a
0004fe f7f1
0004ff 943a
000500 950a
000501 f7d9
000502 903f
000503 910f
000504 943a
000505 f791
000506 950a
000507 f781
000508 b360
000509 bb68
00050a ff64
00050b 940c 0517
00050d ff63
00050e 940c 0517
000510 ff62
000511 c005
000512 ff61
000513 940c 0517
000515 940c 047e                 	QUESTION striviaQ1, striviaQ12, strivia1A, strivia1B, strivia1C, strivia1D
000517 edee
000518 e0f3
000519 95c8
00051a 1560
00051b f409
00051c 9468                      	COMPARE answer1
00051d f40e                      	brtc PC+2
00051e 9573                      	inc b1
00051f 940e 038e
000521 f00e
000522 940c 052c
000524 940e 03a4
000526 e8e8
000527 e0f2
000528 940e 03c2
00052a 940c 0532
00052c 940e 03a4
00052e e9e2
00052f e0f2
000530 940e 03c2
000532 1b55
000533 2744
000534 2733
000535 2722
000536 2f27
000537 e802
000538 2e40
000539 e003
00053a 2e50
00053b 940e 000a
00053d 6353
00053e 726f
00053f 3a65
000540 12c0
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\macros.asm(87): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(79): macro 'PRINT_SCORE' called here
000541 0000                      	PRINT_SCORE b1
000542 ed00
000543 2e30
000544 e008
000545 930f
000546 923f
000547 e300
000548 2e30
000549 e006
00054a 943a
00054b f7f1
00054c 943a
00054d 950a
00054e f7d9
00054f 903f
000550 910f
000551 943a
000552 f791
000553 950a
000554 f781                      	WAIT_MS 2000
000555 940e 03a4
000557 eee0
000558 e0f3
000559 940e 03c2
00055b eeea
00055c e0f3
00055d e420
00055e 940e 03b0
000560 940e 03c2
000562 ed00
000563 2e30
000564 e008
000565 930f
000566 923f
000567 e300
000568 2e30
000569 e006
00056a 943a
00056b f7f1
00056c 943a
00056d 950a
00056e f7d9
00056f 903f
000570 910f
000571 943a
000572 f791
000573 950a
000574 f781
000575 b360
000576 bb68
000577 ff64
000578 940c 05ee
00057a ff63
00057b 940c 05ee
00057d ff62
00057e 940c 05ee
000580 ff61
000581 940c 05ee
000583 940e 03a4
000585 efe4
000586 e0f3
000587 940e 03c2
000589 e0e4
00058a e0f4
00058b e420
00058c 940e 03b0
00058e 940e 03c2
000590 b360
000591 bb68
000592 ff64
000593 940c 05ee
000595 ff63
000596 940c 05ee
000598 ff62
000599 940c 05ee
00059b ff61
00059c 940c 05ee
00059e ed00
00059f 2e30
0005a0 e008
0005a1 930f
0005a2 923f
0005a3 e300
0005a4 2e30
0005a5 e006
0005a6 943a
0005a7 f7f1
0005a8 943a
0005a9 950a
0005aa f7d9
0005ab 903f
0005ac 910f
0005ad 943a
0005ae f791
0005af 950a
0005b0 f781
0005b1 b360
0005b2 bb68
0005b3 ff64
0005b4 940c 05ee
0005b6 ff63
0005b7 940c 05ee
0005b9 ff62
0005ba 940c 05ee
0005bc ff61
0005bd 940c 05ee
0005bf 940e 03a4
0005c1 e1e2
0005c2 e0f4
0005c3 940e 03c2
0005c5 e2e4
0005c6 e0f4
0005c7 e420
0005c8 940e 03b0
0005ca 940e 03c2
0005cc ed00
0005cd 2e30
0005ce e008
0005cf 930f
0005d0 923f
0005d1 e300
0005d2 2e30
0005d3 e006
0005d4 943a
0005d5 f7f1
0005d6 943a
0005d7 950a
0005d8 f7d9
0005d9 903f
0005da 910f
0005db 943a
0005dc f791
0005dd 950a
0005de f781
0005df b360
0005e0 bb68
0005e1 ff64
0005e2 940c 05ee
0005e4 ff63
0005e5 940c 05ee
0005e7 ff62
0005e8 c005
0005e9 ff61
0005ea 940c 05ee
0005ec 940c 0555                 	QUESTION striviaQ2, striviaQ22, strivia2A, strivia2B, strivia2C, strivia2D
0005ee e3e4
0005ef e0f4
0005f0 95c8
0005f1 1560
0005f2 f409
0005f3 9468                      	COMPARE answer2
0005f4 f40e                      	brtc PC+2
0005f5 9573                      	inc b1
0005f6 940e 038e
0005f8 f00e
0005f9 940c 0603
0005fb 940e 03a4
0005fd e8e8
0005fe e0f2
0005ff 940e 03c2
000601 940c 0609
000603 940e 03a4
000605 e9e2
000606 e0f2
000607 940e 03c2
000609 1b55
00060a 2744
00060b 2733
00060c 2722
00060d 2f27
00060e e802
00060f 2e40
000610 e003
000611 2e50
000612 940e 000a
000614 6353
000615 726f
000616 3a65
000617 12c0
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\macros.asm(87): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(85): macro 'PRINT_SCORE' called here
000618 0000                      	PRINT_SCORE b1
000619 ed00
00061a 2e30
00061b e008
00061c 930f
00061d 923f
00061e e300
00061f 2e30
000620 e006
000621 943a
000622 f7f1
000623 943a
000624 950a
000625 f7d9
000626 903f
000627 910f
000628 943a
000629 f791
00062a 950a
00062b f781                      	WAIT_MS 2000
00062c 940e 03a4
00062e e3e6
00062f e0f4
000630 940e 03c2
000632 e4e8
000633 e0f4
000634 e420
000635 940e 03b0
000637 940e 03c2
000639 ed00
00063a 2e30
00063b e008
00063c 930f
00063d 923f
00063e e300
00063f 2e30
000640 e006
000641 943a
000642 f7f1
000643 943a
000644 950a
000645 f7d9
000646 903f
000647 910f
000648 943a
000649 f791
00064a 950a
00064b f781
00064c b360
00064d bb68
00064e ff64
00064f 940c 06c5
000651 ff63
000652 940c 06c5
000654 ff62
000655 940c 06c5
000657 ff61
000658 940c 06c5
00065a 940e 03a4
00065c e5e4
00065d e0f4
00065e 940e 03c2
000660 e6e6
000661 e0f4
000662 e420
000663 940e 03b0
000665 940e 03c2
000667 b360
000668 bb68
000669 ff64
00066a 940c 06c5
00066c ff63
00066d 940c 06c5
00066f ff62
000670 940c 06c5
000672 ff61
000673 940c 06c5
000675 ed00
000676 2e30
000677 e008
000678 930f
000679 923f
00067a e300
00067b 2e30
00067c e006
00067d 943a
00067e f7f1
00067f 943a
000680 950a
000681 f7d9
000682 903f
000683 910f
000684 943a
000685 f791
000686 950a
000687 f781
000688 b360
000689 bb68
00068a ff64
00068b 940c 06c5
00068d ff63
00068e 940c 06c5
000690 ff62
000691 940c 06c5
000693 ff61
000694 940c 06c5
000696 940e 03a4
000698 e7e6
000699 e0f4
00069a 940e 03c2
00069c e8e2
00069d e0f4
00069e e420
00069f 940e 03b0
0006a1 940e 03c2
0006a3 ed00
0006a4 2e30
0006a5 e008
0006a6 930f
0006a7 923f
0006a8 e300
0006a9 2e30
0006aa e006
0006ab 943a
0006ac f7f1
0006ad 943a
0006ae 950a
0006af f7d9
0006b0 903f
0006b1 910f
0006b2 943a
0006b3 f791
0006b4 950a
0006b5 f781
0006b6 b360
0006b7 bb68
0006b8 ff64
0006b9 940c 06c5
0006bb ff63
0006bc 940c 06c5
0006be ff62
0006bf c005
0006c0 ff61
0006c1 940c 06c5
0006c3 940c 062c                 	QUESTION striviaQ3, striviaQ32, strivia3A, strivia3B, strivia3C, strivia3D
0006c5 e9e0
0006c6 e0f4
0006c7 95c8
0006c8 1560
0006c9 f409
0006ca 9468                      	COMPARE answer3
0006cb f40e                      	brtc PC+2
0006cc 9573                      	inc b1
0006cd 940e 038e
0006cf f00e
0006d0 940c 06da
0006d2 940e 03a4
0006d4 e8e8
0006d5 e0f2
0006d6 940e 03c2
0006d8 940c 06e0
0006da 940e 03a4
0006dc e9e2
0006dd e0f2
0006de 940e 03c2
0006e0 1b55
0006e1 2744
0006e2 2733
0006e3 2722
0006e4 2f27
0006e5 e802
0006e6 2e40
0006e7 e003
0006e8 2e50
0006e9 940e 000a
0006eb 6353
0006ec 726f
0006ed 3a65
0006ee 12c0
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\macros.asm(87): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(91): macro 'PRINT_SCORE' called here
0006ef 0000                      	PRINT_SCORE b1
0006f0 ed00
0006f1 2e30
0006f2 e008
0006f3 930f
0006f4 923f
0006f5 e300
0006f6 2e30
0006f7 e006
0006f8 943a
0006f9 f7f1
0006fa 943a
0006fb 950a
0006fc f7d9
0006fd 903f
0006fe 910f
0006ff 943a
000700 f791
000701 950a
000702 f781                      	WAIT_MS 2000
000703 940e 03a4
000705 e9e2
000706 e0f4
000707 940e 03c2
000709 eae2
00070a e0f4
00070b e420
00070c 940e 03b0
00070e 940e 03c2
000710 ed00
000711 2e30
000712 e008
000713 930f
000714 923f
000715 e300
000716 2e30
000717 e006
000718 943a
000719 f7f1
00071a 943a
00071b 950a
00071c f7d9
00071d 903f
00071e 910f
00071f 943a
000720 f791
000721 950a
000722 f781
000723 b360
000724 bb68
000725 ff64
000726 940c 079c
000728 ff63
000729 940c 079c
00072b ff62
00072c 940c 079c
00072e ff61
00072f 940c 079c
000731 940e 03a4
000733 ebe0
000734 e0f4
000735 940e 03c2
000737 ece2
000738 e0f4
000739 e420
00073a 940e 03b0
00073c 940e 03c2
00073e b360
00073f bb68
000740 ff64
000741 940c 079c
000743 ff63
000744 940c 079c
000746 ff62
000747 940c 079c
000749 ff61
00074a 940c 079c
00074c ed00
00074d 2e30
00074e e008
00074f 930f
000750 923f
000751 e300
000752 2e30
000753 e006
000754 943a
000755 f7f1
000756 943a
000757 950a
000758 f7d9
000759 903f
00075a 910f
00075b 943a
00075c f791
00075d 950a
00075e f781
00075f b360
000760 bb68
000761 ff64
000762 940c 079c
000764 ff63
000765 940c 079c
000767 ff62
000768 940c 079c
00076a ff61
00076b 940c 079c
00076d 940e 03a4
00076f ede0
000770 e0f4
000771 940e 03c2
000773 edec
000774 e0f4
000775 e420
000776 940e 03b0
000778 940e 03c2
00077a ed00
00077b 2e30
00077c e008
00077d 930f
00077e 923f
00077f e300
000780 2e30
000781 e006
000782 943a
000783 f7f1
000784 943a
000785 950a
000786 f7d9
000787 903f
000788 910f
000789 943a
00078a f791
00078b 950a
00078c f781
00078d b360
00078e bb68
00078f ff64
000790 940c 079c
000792 ff63
000793 940c 079c
000795 ff62
000796 c005
000797 ff61
000798 940c 079c
00079a 940c 0703                 	QUESTION striviaQ4, striviaQ42, strivia4A, strivia4B, strivia4C, strivia4D
00079c eeea
00079d e0f4
00079e 95c8
00079f 1560
0007a0 f409
0007a1 9468                      	COMPARE answer4
0007a2 f40e                      	brtc PC+2
0007a3 9573                      	inc b1
0007a4 940e 038e
0007a6 f00e
0007a7 940c 07b1
0007a9 940e 03a4
0007ab e8e8
0007ac e0f2
0007ad 940e 03c2
0007af 940c 07b7
0007b1 940e 03a4
0007b3 e9e2
0007b4 e0f2
0007b5 940e 03c2
0007b7 1b55
0007b8 2744
0007b9 2733
0007ba 2722
0007bb 2f27
0007bc e802
0007bd 2e40
0007be e003
0007bf 2e50
0007c0 940e 000a
0007c2 6353
0007c3 726f
0007c4 3a65
0007c5 12c0
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\macros.asm(87): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(97): macro 'PRINT_SCORE' called here
0007c6 0000                      	PRINT_SCORE b1
0007c7 ed00
0007c8 2e30
0007c9 e008
0007ca 930f
0007cb 923f
0007cc e300
0007cd 2e30
0007ce e006
0007cf 943a
0007d0 f7f1
0007d1 943a
0007d2 950a
0007d3 f7d9
0007d4 903f
0007d5 910f
0007d6 943a
0007d7 f791
0007d8 950a
0007d9 f781                      	WAIT_MS 2000
0007da 940e 03a4
0007dc eeec
0007dd e0f4
0007de 940e 03c2
0007e0 efe8
0007e1 e0f4
0007e2 e420
0007e3 940e 03b0
0007e5 940e 03c2
0007e7 ed00
0007e8 2e30
0007e9 e008
0007ea 930f
0007eb 923f
0007ec e300
0007ed 2e30
0007ee e006
0007ef 943a
0007f0 f7f1
0007f1 943a
0007f2 950a
0007f3 f7d9
0007f4 903f
0007f5 910f
0007f6 943a
0007f7 f791
0007f8 950a
0007f9 f781
0007fa b360
0007fb bb68
0007fc ff64
0007fd 940c 0873
0007ff ff63
000800 940c 0873
000802 ff62
000803 940c 0873
000805 ff61
000806 940c 0873
000808 940e 03a4
00080a e0e2
00080b e0f5
00080c 940e 03c2
00080e e1e4
00080f e0f5
000810 e420
000811 940e 03b0
000813 940e 03c2
000815 b360
000816 bb68
000817 ff64
000818 940c 0873
00081a ff63
00081b 940c 0873
00081d ff62
00081e 940c 0873
000820 ff61
000821 940c 0873
000823 ed00
000824 2e30
000825 e008
000826 930f
000827 923f
000828 e300
000829 2e30
00082a e006
00082b 943a
00082c f7f1
00082d 943a
00082e 950a
00082f f7d9
000830 903f
000831 910f
000832 943a
000833 f791
000834 950a
000835 f781
000836 b360
000837 bb68
000838 ff64
000839 940c 0873
00083b ff63
00083c 940c 0873
00083e ff62
00083f 940c 0873
000841 ff61
000842 940c 0873
000844 940e 03a4
000846 e2e2
000847 e0f5
000848 940e 03c2
00084a e2ec
00084b e0f5
00084c e420
00084d 940e 03b0
00084f 940e 03c2
000851 ed00
000852 2e30
000853 e008
000854 930f
000855 923f
000856 e300
000857 2e30
000858 e006
000859 943a
00085a f7f1
00085b 943a
00085c 950a
00085d f7d9
00085e 903f
00085f 910f
000860 943a
000861 f791
000862 950a
000863 f781
000864 b360
000865 bb68
000866 ff64
000867 940c 0873
000869 ff63
00086a 940c 0873
00086c ff62
00086d c005
00086e ff61
00086f 940c 0873
000871 940c 07da                 	QUESTION striviaQ5, striviaQ52, strivia5A, strivia5B, strivia5C, strivia5D
000873 e3e4
000874 e0f5
000875 95c8
000876 1560
000877 f409
000878 9468                      	COMPARE answer5
000879 f40e                      	brtc PC+2
00087a 9573                      	inc b1
00087b 940e 038e
00087d f00e
00087e 940c 0888
000880 940e 03a4
000882 e8e8
000883 e0f2
000884 940e 03c2
000886 940c 088e
000888 940e 03a4
00088a e9e2
00088b e0f2
00088c 940e 03c2
00088e 1b55
00088f 2744
000890 2733
000891 2722
000892 2f27
000893 e802
000894 2e40
000895 e003
000896 2e50
000897 940e 000a
000899 6353
00089a 726f
00089b 3a65
00089c 12c0
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\macros.asm(87): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(103): macro 'PRINT_SCORE' called here
00089d 0000                      	PRINT_SCORE b1
00089e ed00
00089f 2e30
0008a0 e008
0008a1 930f
0008a2 923f
0008a3 e300
0008a4 2e30
0008a5 e006
0008a6 943a
0008a7 f7f1
0008a8 943a
0008a9 950a
0008aa f7d9
0008ab 903f
0008ac 910f
0008ad 943a
0008ae f791
0008af 950a
0008b0 f781                      	WAIT_MS 2000
0008b1 940e 03a4
0008b3 e3e6
0008b4 e0f5
0008b5 940e 03c2
0008b7 e4e8
0008b8 e0f5
0008b9 e420
0008ba 940e 03b0
0008bc 940e 03c2
0008be ed00
0008bf 2e30
0008c0 e008
0008c1 930f
0008c2 923f
0008c3 e300
0008c4 2e30
0008c5 e006
0008c6 943a
0008c7 f7f1
0008c8 943a
0008c9 950a
0008ca f7d9
0008cb 903f
0008cc 910f
0008cd 943a
0008ce f791
0008cf 950a
0008d0 f781
0008d1 b360
0008d2 bb68
0008d3 ff64
0008d4 940c 094a
0008d6 ff63
0008d7 940c 094a
0008d9 ff62
0008da 940c 094a
0008dc ff61
0008dd 940c 094a
0008df 940e 03a4
0008e1 e5e8
0008e2 e0f5
0008e3 940e 03c2
0008e5 e6ea
0008e6 e0f5
0008e7 e420
0008e8 940e 03b0
0008ea 940e 03c2
0008ec b360
0008ed bb68
0008ee ff64
0008ef 940c 094a
0008f1 ff63
0008f2 940c 094a
0008f4 ff62
0008f5 940c 094a
0008f7 ff61
0008f8 940c 094a
0008fa ed00
0008fb 2e30
0008fc e008
0008fd 930f
0008fe 923f
0008ff e300
000900 2e30
000901 e006
000902 943a
000903 f7f1
000904 943a
000905 950a
000906 f7d9
000907 903f
000908 910f
000909 943a
00090a f791
00090b 950a
00090c f781
00090d b360
00090e bb68
00090f ff64
000910 940c 094a
000912 ff63
000913 940c 094a
000915 ff62
000916 940c 094a
000918 ff61
000919 940c 094a
00091b 940e 03a4
00091d e7ea
00091e e0f5
00091f 940e 03c2
000921 e8e8
000922 e0f5
000923 e420
000924 940e 03b0
000926 940e 03c2
000928 ed00
000929 2e30
00092a e008
00092b 930f
00092c 923f
00092d e300
00092e 2e30
00092f e006
000930 943a
000931 f7f1
000932 943a
000933 950a
000934 f7d9
000935 903f
000936 910f
000937 943a
000938 f791
000939 950a
00093a f781
00093b b360
00093c bb68
00093d ff64
00093e 940c 094a
000940 ff63
000941 940c 094a
000943 ff62
000944 c005
000945 ff61
000946 940c 094a
000948 940c 08b1                 	QUESTION striviaQ6, striviaQ62, strivia6A, strivia6B, strivia6C, strivia6D
00094a e9e2
00094b e0f5
00094c 95c8
00094d 1560
00094e f409
00094f 9468                      	COMPARE answer6
000950 f40e                      	brtc PC+2
000951 9573                      	inc b1
000952 940e 038e
000954 f00e
000955 940c 095f
000957 940e 03a4
000959 e8e8
00095a e0f2
00095b 940e 03c2
00095d 940c 0965
00095f 940e 03a4
000961 e9e2
000962 e0f2
000963 940e 03c2
000965 1b55
000966 2744
000967 2733
000968 2722
000969 2f27
00096a e802
00096b 2e40
00096c e003
00096d 2e50
00096e 940e 000a
000970 6353
000971 726f
000972 3a65
000973 12c0
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\macros.asm(87): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(109): macro 'PRINT_SCORE' called here
000974 0000                      	PRINT_SCORE b1
000975 ed00
000976 2e30
000977 e008
000978 930f
000979 923f
00097a e300
00097b 2e30
00097c e006
00097d 943a
00097e f7f1
00097f 943a
000980 950a
000981 f7d9
000982 903f
000983 910f
000984 943a
000985 f791
000986 950a
000987 f781                      	WAIT_MS 2000
000988 940e 03a4
00098a e9e4
00098b e0f5
00098c 940e 03c2
00098e eae2
00098f e0f5
000990 e420
000991 940e 03b0
000993 940e 03c2
000995 ed00
000996 2e30
000997 e008
000998 930f
000999 923f
00099a e300
00099b 2e30
00099c e006
00099d 943a
00099e f7f1
00099f 943a
0009a0 950a
0009a1 f7d9
0009a2 903f
0009a3 910f
0009a4 943a
0009a5 f791
0009a6 950a
0009a7 f781
0009a8 b360
0009a9 bb68
0009aa ff64
0009ab 940c 0a21
0009ad ff63
0009ae 940c 0a21
0009b0 ff62
0009b1 940c 0a21
0009b3 ff61
0009b4 940c 0a21
0009b6 940e 03a4
0009b8 eaee
0009b9 e0f5
0009ba 940e 03c2
0009bc ece0
0009bd e0f5
0009be e420
0009bf 940e 03b0
0009c1 940e 03c2
0009c3 b360
0009c4 bb68
0009c5 ff64
0009c6 940c 0a21
0009c8 ff63
0009c9 940c 0a21
0009cb ff62
0009cc 940c 0a21
0009ce ff61
0009cf 940c 0a21
0009d1 ed00
0009d2 2e30
0009d3 e008
0009d4 930f
0009d5 923f
0009d6 e300
0009d7 2e30
0009d8 e006
0009d9 943a
0009da f7f1
0009db 943a
0009dc 950a
0009dd f7d9
0009de 903f
0009df 910f
0009e0 943a
0009e1 f791
0009e2 950a
0009e3 f781
0009e4 b360
0009e5 bb68
0009e6 ff64
0009e7 940c 0a21
0009e9 ff63
0009ea 940c 0a21
0009ec ff62
0009ed 940c 0a21
0009ef ff61
0009f0 940c 0a21
0009f2 940e 03a4
0009f4 ecec
0009f5 e0f5
0009f6 940e 03c2
0009f8 ede6
0009f9 e0f5
0009fa e420
0009fb 940e 03b0
0009fd 940e 03c2
0009ff ed00
000a00 2e30
000a01 e008
000a02 930f
000a03 923f
000a04 e300
000a05 2e30
000a06 e006
000a07 943a
000a08 f7f1
000a09 943a
000a0a 950a
000a0b f7d9
000a0c 903f
000a0d 910f
000a0e 943a
000a0f f791
000a10 950a
000a11 f781
000a12 b360
000a13 bb68
000a14 ff64
000a15 940c 0a21
000a17 ff63
000a18 940c 0a21
000a1a ff62
000a1b c005
000a1c ff61
000a1d 940c 0a21
000a1f 940c 0988                 	QUESTION striviaQ7, striviaQ72, strivia7A, strivia7B, strivia7C, strivia7D
000a21 eee0
000a22 e0f5
000a23 95c8
000a24 1560
000a25 f409
000a26 9468                      	COMPARE answer7
000a27 f40e                      	brtc PC+2
000a28 9573                      	inc b1
000a29 940e 038e
000a2b f00e
000a2c 940c 0a36
000a2e 940e 03a4
000a30 e8e8
000a31 e0f2
000a32 940e 03c2
000a34 940c 0a3c
000a36 940e 03a4
000a38 e9e2
000a39 e0f2
000a3a 940e 03c2
000a3c 1b55
000a3d 2744
000a3e 2733
000a3f 2722
000a40 2f27
000a41 e802
000a42 2e40
000a43 e003
000a44 2e50
000a45 940e 000a
000a47 6353
000a48 726f
000a49 3a65
000a4a 12c0
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\macros.asm(87): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(115): macro 'PRINT_SCORE' called here
000a4b 0000                      	PRINT_SCORE b1
000a4c ed00
000a4d 2e30
000a4e e008
000a4f 930f
000a50 923f
000a51 e300
000a52 2e30
000a53 e006
000a54 943a
000a55 f7f1
000a56 943a
000a57 950a
000a58 f7d9
000a59 903f
000a5a 910f
000a5b 943a
000a5c f791
000a5d 950a
000a5e f781                      	WAIT_MS 2000
000a5f 940e 03a4
000a61 eee2
000a62 e0f5
000a63 940e 03c2
000a65 efe4
000a66 e0f5
000a67 e420
000a68 940e 03b0
000a6a 940e 03c2
000a6c ed00
000a6d 2e30
000a6e e008
000a6f 930f
000a70 923f
000a71 e300
000a72 2e30
000a73 e006
000a74 943a
000a75 f7f1
000a76 943a
000a77 950a
000a78 f7d9
000a79 903f
000a7a 910f
000a7b 943a
000a7c f791
000a7d 950a
000a7e f781
000a7f b360
000a80 bb68
000a81 ff64
000a82 940c 0af8
000a84 ff63
000a85 940c 0af8
000a87 ff62
000a88 940c 0af8
000a8a ff61
000a8b 940c 0af8
000a8d 940e 03a4
000a8f e0e2
000a90 e0f6
000a91 940e 03c2
000a93 e0ea
000a94 e0f6
000a95 e420
000a96 940e 03b0
000a98 940e 03c2
000a9a b360
000a9b bb68
000a9c ff64
000a9d 940c 0af8
000a9f ff63
000aa0 940c 0af8
000aa2 ff62
000aa3 940c 0af8
000aa5 ff61
000aa6 940c 0af8
000aa8 ed00
000aa9 2e30
000aaa e008
000aab 930f
000aac 923f
000aad e300
000aae 2e30
000aaf e006
000ab0 943a
000ab1 f7f1
000ab2 943a
000ab3 950a
000ab4 f7d9
000ab5 903f
000ab6 910f
000ab7 943a
000ab8 f791
000ab9 950a
000aba f781
000abb b360
000abc bb68
000abd ff64
000abe 940c 0af8
000ac0 ff63
000ac1 940c 0af8
000ac3 ff62
000ac4 940c 0af8
000ac6 ff61
000ac7 940c 0af8
000ac9 940e 03a4
000acb e1e8
000acc e0f6
000acd 940e 03c2
000acf e2e2
000ad0 e0f6
000ad1 e420
000ad2 940e 03b0
000ad4 940e 03c2
000ad6 ed00
000ad7 2e30
000ad8 e008
000ad9 930f
000ada 923f
000adb e300
000adc 2e30
000add e006
000ade 943a
000adf f7f1
000ae0 943a
000ae1 950a
000ae2 f7d9
000ae3 903f
000ae4 910f
000ae5 943a
000ae6 f791
000ae7 950a
000ae8 f781
000ae9 b360
000aea bb68
000aeb ff64
000aec 940c 0af8
000aee ff63
000aef 940c 0af8
000af1 ff62
000af2 c005
000af3 ff61
000af4 940c 0af8
000af6 940c 0a5f                 	QUESTION striviaQ8, striviaQ82, strivia8A, strivia8B, strivia8C, strivia8D
000af8 e3e4
000af9 e0f6
000afa 95c8
000afb 1560
000afc f409
000afd 9468                      	COMPARE answer8
000afe f40e                      	brtc PC+2
000aff 9573                      	inc b1
000b00 940e 038e
000b02 f00e
000b03 940c 0b0d
000b05 940e 03a4
000b07 e8e8
000b08 e0f2
000b09 940e 03c2
000b0b 940c 0b13
000b0d 940e 03a4
000b0f e9e2
000b10 e0f2
000b11 940e 03c2
000b13 1b55
000b14 2744
000b15 2733
000b16 2722
000b17 2f27
000b18 e802
000b19 2e40
000b1a e003
000b1b 2e50
000b1c 940e 000a
000b1e 6353
000b1f 726f
000b20 3a65
000b21 12c0
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\macros.asm(87): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(121): macro 'PRINT_SCORE' called here
000b22 0000                      	PRINT_SCORE b1
000b23 ed00
000b24 2e30
000b25 e008
000b26 930f
000b27 923f
000b28 e300
000b29 2e30
000b2a e006
000b2b 943a
000b2c f7f1
000b2d 943a
000b2e 950a
000b2f f7d9
000b30 903f
000b31 910f
000b32 943a
000b33 f791
000b34 950a
000b35 f781                      	WAIT_MS 2000
000b36 940e 03a4
000b38 e3e6
000b39 e0f6
000b3a 940e 03c2
000b3c e4e6
000b3d e0f6
000b3e e420
000b3f 940e 03b0
000b41 940e 03c2
000b43 ed00
000b44 2e30
000b45 e008
000b46 930f
000b47 923f
000b48 e300
000b49 2e30
000b4a e006
000b4b 943a
000b4c f7f1
000b4d 943a
000b4e 950a
000b4f f7d9
000b50 903f
000b51 910f
000b52 943a
000b53 f791
000b54 950a
000b55 f781
000b56 b360
000b57 bb68
000b58 ff64
000b59 940c 0bcf
000b5b ff63
000b5c 940c 0bcf
000b5e ff62
000b5f 940c 0bcf
000b61 ff61
000b62 940c 0bcf
000b64 940e 03a4
000b66 e5e8
000b67 e0f6
000b68 940e 03c2
000b6a e6ea
000b6b e0f6
000b6c e420
000b6d 940e 03b0
000b6f 940e 03c2
000b71 b360
000b72 bb68
000b73 ff64
000b74 940c 0bcf
000b76 ff63
000b77 940c 0bcf
000b79 ff62
000b7a 940c 0bcf
000b7c ff61
000b7d 940c 0bcf
000b7f ed00
000b80 2e30
000b81 e008
000b82 930f
000b83 923f
000b84 e300
000b85 2e30
000b86 e006
000b87 943a
000b88 f7f1
000b89 943a
000b8a 950a
000b8b f7d9
000b8c 903f
000b8d 910f
000b8e 943a
000b8f f791
000b90 950a
000b91 f781
000b92 b360
000b93 bb68
000b94 ff64
000b95 940c 0bcf
000b97 ff63
000b98 940c 0bcf
000b9a ff62
000b9b 940c 0bcf
000b9d ff61
000b9e 940c 0bcf
000ba0 940e 03a4
000ba2 e7e8
000ba3 e0f6
000ba4 940e 03c2
000ba6 e8e0
000ba7 e0f6
000ba8 e420
000ba9 940e 03b0
000bab 940e 03c2
000bad ed00
000bae 2e30
000baf e008
000bb0 930f
000bb1 923f
000bb2 e300
000bb3 2e30
000bb4 e006
000bb5 943a
000bb6 f7f1
000bb7 943a
000bb8 950a
000bb9 f7d9
000bba 903f
000bbb 910f
000bbc 943a
000bbd f791
000bbe 950a
000bbf f781
000bc0 b360
000bc1 bb68
000bc2 ff64
000bc3 940c 0bcf
000bc5 ff63
000bc6 940c 0bcf
000bc8 ff62
000bc9 c005
000bca ff61
000bcb 940c 0bcf
000bcd 940c 0b36                 	QUESTION striviaQ9, striviaQ92, strivia9A, strivia9B, strivia9C, strivia9D
000bcf e9e2
000bd0 e0f6
000bd1 95c8
000bd2 1560
000bd3 f409
000bd4 9468                      	COMPARE answer9
000bd5 f40e                      	brtc PC+2
000bd6 9573                      	inc b1
000bd7 940e 038e
000bd9 f00e
000bda 940c 0be4
000bdc 940e 03a4
000bde e8e8
000bdf e0f2
000be0 940e 03c2
000be2 940c 0bea
000be4 940e 03a4
000be6 e9e2
000be7 e0f2
000be8 940e 03c2
000bea 1b55
000beb 2744
000bec 2733
000bed 2722
000bee 2f27
000bef e802
000bf0 2e40
000bf1 e003
000bf2 2e50
000bf3 940e 000a
000bf5 6353
000bf6 726f
000bf7 3a65
000bf8 12c0
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\macros.asm(87): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(127): macro 'PRINT_SCORE' called here
000bf9 0000                      	PRINT_SCORE b1
000bfa ed00
000bfb 2e30
000bfc e008
000bfd 930f
000bfe 923f
000bff e300
000c00 2e30
000c01 e006
000c02 943a
000c03 f7f1
000c04 943a
000c05 950a
000c06 f7d9
000c07 903f
000c08 910f
000c09 943a
000c0a f791
000c0b 950a
000c0c f781                      	WAIT_MS 2000
000c0d 940e 03a4
000c0f e9e4
000c10 e0f6
000c11 940e 03c2
000c13 eae2
000c14 e0f6
000c15 e420
000c16 940e 03b0
000c18 940e 03c2
000c1a ed00
000c1b 2e30
000c1c e008
000c1d 930f
000c1e 923f
000c1f e300
000c20 2e30
000c21 e006
000c22 943a
000c23 f7f1
000c24 943a
000c25 950a
000c26 f7d9
000c27 903f
000c28 910f
000c29 943a
000c2a f791
000c2b 950a
000c2c f781
000c2d b360
000c2e bb68
000c2f ff64
000c30 940c 0ca6
000c32 ff63
000c33 940c 0ca6
000c35 ff62
000c36 940c 0ca6
000c38 ff61
000c39 940c 0ca6
000c3b 940e 03a4
000c3d eaee
000c3e e0f6
000c3f 940e 03c2
000c41 ebec
000c42 e0f6
000c43 e420
000c44 940e 03b0
000c46 940e 03c2
000c48 b360
000c49 bb68
000c4a ff64
000c4b 940c 0ca6
000c4d ff63
000c4e 940c 0ca6
000c50 ff62
000c51 940c 0ca6
000c53 ff61
000c54 940c 0ca6
000c56 ed00
000c57 2e30
000c58 e008
000c59 930f
000c5a 923f
000c5b e300
000c5c 2e30
000c5d e006
000c5e 943a
000c5f f7f1
000c60 943a
000c61 950a
000c62 f7d9
000c63 903f
000c64 910f
000c65 943a
000c66 f791
000c67 950a
000c68 f781
000c69 b360
000c6a bb68
000c6b ff64
000c6c 940c 0ca6
000c6e ff63
000c6f 940c 0ca6
000c71 ff62
000c72 940c 0ca6
000c74 ff61
000c75 940c 0ca6
000c77 940e 03a4
000c79 ecee
000c7a e0f6
000c7b 940e 03c2
000c7d edec
000c7e e0f6
000c7f e420
000c80 940e 03b0
000c82 940e 03c2
000c84 ed00
000c85 2e30
000c86 e008
000c87 930f
000c88 923f
000c89 e300
000c8a 2e30
000c8b e006
000c8c 943a
000c8d f7f1
000c8e 943a
000c8f 950a
000c90 f7d9
000c91 903f
000c92 910f
000c93 943a
000c94 f791
000c95 950a
000c96 f781
000c97 b360
000c98 bb68
000c99 ff64
000c9a 940c 0ca6
000c9c ff63
000c9d 940c 0ca6
000c9f ff62
000ca0 c005
000ca1 ff61
000ca2 940c 0ca6
000ca4 940c 0c0d                 	QUESTION striviaQ10, striviaQ102, strivia10A, strivia10B, strivia10C, strivia10D
000ca6 eeec
000ca7 e0f6
000ca8 95c8
000ca9 1560
000caa f409
000cab 9468                      	COMPARE answer10
000cac f40e                      	brtc PC+2
000cad 9573                      	inc b1
000cae 940e 038e
000cb0 f00e
000cb1 940c 0cbb
000cb3 940e 03a4
000cb5 e8e8
000cb6 e0f2
000cb7 940e 03c2
000cb9 940c 0cc1
000cbb 940e 03a4
000cbd e9e2
000cbe e0f2
000cbf 940e 03c2
000cc1 1b55
000cc2 2744
000cc3 2733
000cc4 2722
000cc5 2f27
000cc6 e802
000cc7 2e40
000cc8 e003
000cc9 2e50
000cca 940e 000a
000ccc 6353
000ccd 726f
000cce 3a65
000ccf 12c0
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\macros.asm(87): warning: .cseg .db misalignment - padding zero byte
C:\Users\renuka\Desktop\mcu\projet\MCU\AssemblerApplication1\AssemblerApplication1\main.asm(133): macro 'PRINT_SCORE' called here
000cd0 0000                      	PRINT_SCORE b1
000cd1 ed00
000cd2 2e30
000cd3 e008
000cd4 930f
000cd5 923f
000cd6 e300
000cd7 2e30
000cd8 e006
000cd9 943a
000cda f7f1
000cdb 943a
000cdc 950a
000cdd f7d9
000cde 903f
000cdf 910f
000ce0 943a
000ce1 f791
000ce2 950a
000ce3 f781                      	WAIT_MS 2000
000ce4 e005                      	ldi w, 0x05
000ce5 1770                      	cp b1, w
000ce6 f410                      	brsh trivia_won
000ce7 940c 0d2b                 	jmp trivia_lost
                                 trivia_won:
000ce9 940e 03a4
000ceb ede0
000cec e0f2
000ced 940e 03c2
000cef eee0
000cf0 e0f2
000cf1 e420
000cf2 940e 03b0
000cf4 940e 03c2                     DISPLAY2 strwin1, strwin2
000cf6 ed00
000cf7 2e30
000cf8 e008
000cf9 930f
000cfa 923f
000cfb e300
000cfc 2e30
000cfd e006
000cfe 943a
000cff f7f1
000d00 943a
000d01 950a
000d02 f7d9
000d03 903f
000d04 910f
000d05 943a
000d06 f791
000d07 950a
000d08 f781                      	WAIT_MS 2000
000d09 940e 03a4
000d0b ebea
000d0c e0f2
000d0d 940e 03c2
000d0f ece4
000d10 e0f2
000d11 e420
000d12 940e 03b0
000d14 940e 03c2                 	DISPLAY2 strclue1a, strclue1b
000d16 ea00
000d17 2e30
000d18 e100
000d19 930f
000d1a 923f
000d1b e300
000d1c 2e30
000d1d e006
000d1e 943a
000d1f f7f1
000d20 943a
000d21 950a
000d22 f7d9
000d23 903f
000d24 910f
000d25 943a
000d26 f791
000d27 950a
000d28 f781                      	WAIT_MS 4000
000d29 940c 03eb                 	jmp main_loop
                                 trivia_lost:
000d2b 940e 03a4
000d2d eee8
000d2e e0f2
000d2f 940e 03c2
000d31 efe2
000d32 e0f2
000d33 e420
000d34 940e 03b0
000d36 940e 03c2                 	DISPLAY2 strlose1, strlose2
000d38 ed00
000d39 2e30
000d3a e008
000d3b 930f
000d3c 923f
000d3d e300
000d3e 2e30
000d3f e006
000d40 943a
000d41 f7f1
000d42 943a
000d43 950a
000d44 f7d9
000d45 903f
000d46 910f
000d47 943a
000d48 f791
000d49 950a
000d4a f781                      	WAIT_MS 2000
000d4b 940c 03eb                 	jmp main_loop
                                 
                                 dance:
000d4d 940e 03a4
000d4f e6e4
000d50 e0f2
000d51 940e 03c2
000d53 e7ea
000d54 e0f2
000d55 e420
000d56 940e 03b0
000d58 940e 03c2                 	DISPLAY2 strwelcome, strbutton
000d5a 940e 0d89                 	call check_button
000d5c ed00
000d5d 2e30
000d5e e008
000d5f 930f
000d60 923f
000d61 e300
000d62 2e30
000d63 e006
000d64 943a
000d65 f7f1
000d66 943a
000d67 950a
000d68 f7d9
000d69 903f
000d6a 910f
000d6b 943a
000d6c f791
000d6d 950a
000d6e f781                      	WAIT_MS 2000
000d6f 940c 03eb                 	jmp main_loop
                                 
                                 
                                 safe:
000d71 940e 03a4
000d73 e1ec
000d74 e0f3
000d75 940e 03c2                 	DISPLAY1 str6
000d77 940c 0d79                 	jmp end
                                 
                                 
                                 end:
000d79 d00f                      	rcall check_button
000d7a 940e 03a4
000d7c e6e6
000d7d e0f3
000d7e 940e 03c2
000d80 e7e2
000d81 e0f3
000d82 e420
000d83 940e 03b0
000d85 940e 03c2                 	DISPLAY2 str10, str11
000d87 940c 0d79                 	jmp end
                                 
                                 
                                 check_button:
000d89 b360                      	in b0, PIND
000d8a ff67                      	sbrs b0, 7 ; Check if PIND7 is pressed
000d8b 940c 0000                 	jmp reset
000d8d 9508                      	ret
                                 
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega128" register use summary:
x  :   6 y  :   0 z  :   0 r0 :  19 r1 :   0 r2 :   0 r3 : 338 r4 :  11 
r5 :  11 r6 :   0 r7 :   0 r8 :   5 r9 :   5 r10:   5 r11:   6 r12:  11 
r13:   0 r14:   0 r15:   0 r16: 600 r17:   0 r18:  85 r19:  25 r20:  25 
r21:  35 r22: 273 r23:  47 r24:   7 r25:  15 r26:   3 r27:   3 r28:   0 
r29:   0 r30: 123 r31: 117 
Registers used: 23 out of 35 (65.7%)

"ATmega128" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   2 adiw  :   6 and   :   0 
andi  :   7 asr   :   2 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   0 break :   0 breq  :  19 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   1 
brne  : 211 brpl  :   1 brsh  :   2 brtc  :  15 brts  :  10 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   1 call  : 229 cbi   :   0 cbr   :   0 
clc   :   1 clh   :   0 cli   :   0 cln   :   0 clr   :  40 cls   :   0 
clt   :   1 clv   :   0 clz   :   0 com   :   8 cp    :  12 cpc   :   3 
cpi   :  13 cpse  :   0 dec   : 246 elpm  :   0 eor   :   0 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   1 ijmp  :   1 in    :  44 inc   :  12 
jmp   : 190 ld    :   6 ldd   :   0 ldi   : 514 lds   :   3 lpm   :  45 
lsl   :   1 lsr   :   3 mov   : 146 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   1 or    :   0 ori   :   2 out   :  47 
pop   : 119 push  : 118 rcall :  27 ret   :  16 reti  :   0 rjmp  :  46 
rol   :  10 ror   :  13 sbc   :   3 sbci  :   0 sbi   :   0 sbic  :   0 
sbis  :   0 sbiw  :   0 sbr   :   1 sbrc  :  11 sbrs  : 165 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :  11 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 
sts   :   3 sub   :  13 subi  :   3 swap  :   4 tst   :   9 wdr   :   0 

Instructions used: 54 out of 114 (47.4%)

"ATmega128" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001b1c   5628   1312   6940  131072   5.3%
[.dseg] 0x000100 0x000100      0      0      0    4096   0.0%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 64 warnings
